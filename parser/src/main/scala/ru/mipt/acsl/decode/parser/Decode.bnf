{
    parserClass = "ru.mipt.acsl.decode.parser.DecodeParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Decode"
    psiImplClassSuffix = "Impl"
    psiPackage = "ru.mipt.acsl.decode.parser.psi"
    psiImplPackage = "ru.mipt.acsl.decode.parser.psi.impl"

    elementTypeHolderClass = "ru.mipt.acsl.decode.parser.psi.DecodeTypes"
    elementTypeClass = "ru.mipt.acsl.decode.parser.psi.DecodeElementType"
    tokenTypeClass = "ru.mipt.acsl.decode.parser.psi.DecodeTokenType"

    tokens = [
        NAMESPACE = "namespace"
        COMPONENT = "component"
        COMMAND = "command"
        //SPACE = "regexp:[\ \r\n\t\v]+"
        ESCAPED_NAME = "regexp:\^[a-zA-Z_][a-zA-Z0-9_]*"
        ELEMENT_NAME_TOKEN = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"
        COMMENT = "regexp:#[^\r\n]*"
        MULTILINE_COMMENT = 'regexp:/\*([^\*][^/\*]?)*\*/'
        LEFT_BRACE = '{'
        RIGHT_BRACE = '}'
        LEFT_PAREN = '('
        RIGHT_PAREN = ')'
        LEFT_BRACKET = '['
        RIGHT_BRACKET = ']'
        COMMA = ','
        EQ_SIGN = '='
        STATUS = "status"
        MESSAGE = "message"
        EVENT = "event"
        DYNAMIC = "dynamic"
        PARAMETER = "parameter"
        STRING = 'regexp:"([^"\\]|\\.)*"'
        STRING_UNARY_QUOTES = "regexp:'([^'\\]|\\.)*'"
        SUBCOMPONENT = "subcomponent"
        PARAMETERS = "parameters"
        UNIT_TOKEN = "unit"
        TYPE_KEYWORD = "type"
        ALIAS = "alias"
        DOTS = ".."
        DOT = "."
        NON_NEGATIVE_NUMBER = "regexp:[0-9]+"
        ARRAY = "array"
        ENUM = "enum"
        PLACEMENT = "placement"
        BEFORE = "before"
        AFTER = "after"
        STRUCT = "struct"
        SLASH = '/'
        STAR = '*'
        PLUS = '+'
        MINUS = '-'
        COLON = ':'
        ARROW = '->'
        LT = '<'
        GT = '>'
        DISPLAY = "display"
        TRUE = "true"
        FALSE = "false"
        WITH = "with"
        QUESTION = "?"
        IMPORT = "import"
        AS = "as"
        ID = "id"
        LANGUAGE = "language"
        DEFAULT = "default"
        PRIORITY = "priority"
        VAR = "var"
        NATIVE = "native"
        FINAL = "final"
        EXTENDS = "extends"
        SCRIPT = "script"
        RANGE = "range"
        FOR = "for"
    ]
}

decodeFile ::= namespace_decl import_stmt* (component_decl | unit_decl | type_decl | alias_decl
    | default_language_decl | script_decl)*

script_decl ::= SCRIPT element_name_rule FOR component_ref LEFT_PAREN command_args? RIGHT_PAREN
    (COLON type_unit_application)? EQ_SIGN LEFT_BRACE expr* RIGHT_BRACE

expr ::= command_call | literal | var_expr

var_expr ::= element_name_rule

command_call ::= element_id LEFT_PAREN (expr (COMMA expr)*)? RIGHT_PAREN

import_stmt ::= IMPORT element_id (DOT (LEFT_BRACE import_element (COMMA import_element)* COMMA? RIGHT_BRACE | import_element_star))?

import_element_star ::= STAR

import_element_as ::= AS element_name_rule

import_element ::= element_name_rule import_element_as?

alias_decl ::= element_info? ALIAS element_name_rule type_application

namespace_decl ::= element_info? NAMESPACE element_id

element_name_rule ::= ELEMENT_NAME_TOKEN | ESCAPED_NAME

component_decl ::= element_info? COMPONENT element_name_rule entity_id? (WITH component_ref (COMMA component_ref)*)?
    LEFT_BRACE component_parameters_decl? (command_decl|message_decl)* RIGHT_BRACE

component_parameters_decl ::= element_info? PARAMETERS LEFT_PAREN command_args RIGHT_PAREN

command_decl ::= element_info? COMMAND element_name_rule entity_id? LEFT_PAREN command_args? RIGHT_PAREN
    (COLON type_unit_application)? (EQ_SIGN LEFT_BRACE expr* RIGHT_BRACE)?

command_args ::= command_arg (COMMA command_arg)* COMMA?

command_arg ::= element_info? element_name_rule COLON type_unit_application

type_unit_application ::= type_application unit?

optional ::= QUESTION

type_application ::= (simple_or_generic_type_application | array_type_application) optional?

generic_parameters ::= LT type_unit_application (COMMA type_unit_application?)* COMMA? GT

simple_or_generic_type_application ::= element_id generic_parameters?

unit ::= SLASH element_id SLASH

array_type_application ::= LEFT_BRACKET type_application (COMMA length_from (DOTS (length_to | STAR))?)? RIGHT_BRACKET

struct_type_decl ::= STRUCT LEFT_PAREN command_args RIGHT_PAREN

element_id ::= element_name_rule (DOT element_name_rule)*

message_decl ::= status_message | event_message

entity_id ::= ID EQ_SIGN NON_NEGATIVE_NUMBER

status_message ::= element_info? STATUS element_name_rule entity_id? (PRIORITY EQ_SIGN NON_NEGATIVE_NUMBER)? status_message_parameters_decl

status_message_parameters_decl ::= LEFT_PAREN parameter_decl (COMMA parameter_decl)* COMMA? RIGHT_PAREN

event_message_parameters_decl ::= LEFT_PAREN event_parameter_decl (COMMA event_parameter_decl)* COMMA? RIGHT_PAREN

event_parameter_decl ::= element_info? (parameter_element | var_parameter_element)

var_parameter_element ::= VAR element_name_rule COLON type_unit_application

event_message ::= element_info? EVENT element_name_rule entity_id? type_application event_message_parameters_decl

parameter_decl ::= element_info? parameter_element

range_upper_bound_decl ::= non_negative_integer_literal | STAR

range_decl ::= LEFT_BRACKET (non_negative_integer_literal (DOTS range_upper_bound_decl)? | STAR) RIGHT_BRACKET

parameter_element ::= element_name_rule (range_decl | DOT element_name_rule)*

element_info ::= string_value+

string_literal ::= STRING | STRING_UNARY_QUOTES

string_value ::= element_name_rule? string_literal

component_ref ::= element_name_rule

unit_decl ::= element_info? UNIT_TOKEN element_name_rule (DISPLAY string_value)* (PLACEMENT (BEFORE | AFTER))?

generic_arg ::= element_name_rule?

generic_args ::= LT generic_arg (COMMA generic_arg)* GT

type_decl ::= element_info? TYPE_KEYWORD element_name_rule generic_args? type_decl_body

length_from ::= NON_NEGATIVE_NUMBER

length_to ::= NON_NEGATIVE_NUMBER

numeric_range_decl ::= numeric_literal DOTS numeric_literal

type_decl_body ::= type_application (RANGE numeric_range_decl)? | enum_type_decl | struct_type_decl | native_type_decl

native_type_decl ::= NATIVE

final_enum ::= FINAL

enum_type_decl ::= final_enum? ENUM (EXTENDS element_name_rule | type_application) LEFT_PAREN enum_type_values RIGHT_PAREN

enum_type_values ::= enum_type_value (COMMA enum_type_value)* COMMA?

enum_type_value ::= element_info? element_name_rule EQ_SIGN literal

non_negative_integer_literal ::= NON_NEGATIVE_NUMBER

numeric_literal ::= float_literal | non_negative_integer_literal

bool_literal ::= TRUE | FALSE

literal ::= numeric_literal | bool_literal

float_literal ::= (PLUS | MINUS)? NON_NEGATIVE_NUMBER DOT NON_NEGATIVE_NUMBER (("e" | "E") (PLUS | MINUS)? NON_NEGATIVE_NUMBER)?

default_language_decl ::= LANGUAGE element_name_rule