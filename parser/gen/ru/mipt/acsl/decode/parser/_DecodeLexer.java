/* The following code was generated by JFlex 1.4.3 on 5/26/16 5:47 PM */

package ru.mipt.acsl.decode.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ru.mipt.acsl.decode.parser.psi.DecodeTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/26/16 5:47 PM from the specification file
 * <tt>/home/metadeus/projects/ACSL/decode-idea-plugin/decode/parser/_DecodeLexer.flex</tt>
 */
public class _DecodeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\12"+
    "\1\7\3\0\1\14\1\31\1\32\1\11\1\53\1\35\1\54\1\47"+
    "\1\10\12\6\1\51\1\0\1\50\1\36\1\55\1\60\1\62\10\5"+
    "\1\65\5\5\1\66\1\63\1\5\1\64\1\5\1\67\4\5\1\70"+
    "\1\5\1\33\1\13\1\34\1\4\1\5\1\0\1\16\1\45\1\23"+
    "\1\26\1\20\1\52\1\40\1\57\1\43\2\5\1\46\1\17\1\15"+
    "\1\24\1\22\1\5\1\44\1\21\1\25\1\37\1\41\1\56\1\61"+
    "\1\42\1\5\1\27\1\0\1\30\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\11\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\4\3\1\20\1\1\1\21\1\3"+
    "\1\22\1\23\1\3\1\24\1\25\1\3\1\26\2\0"+
    "\1\27\3\0\1\30\1\3\1\31\25\3\1\32\1\33"+
    "\3\3\1\34\2\3\1\0\26\3\1\35\4\3\1\36"+
    "\3\3\1\37\6\3\1\40\13\3\1\41\1\42\10\3"+
    "\1\43\3\3\1\44\1\45\2\3\1\46\7\3\1\47"+
    "\10\3\1\50\1\51\2\3\1\52\3\3\1\53\1\54"+
    "\1\55\10\3\1\56\1\57\3\3\1\60\1\61\1\62"+
    "\3\3\1\63\1\3\1\64\1\65\1\66\7\3\1\67"+
    "\1\70\1\71\1\3\1\72\1\73\1\74\1\3\1\75"+
    "\1\3\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\71\0\u0591\0\71\0\u05ca\0\u0603\0\71"+
    "\0\71\0\u063c\0\u0675\0\u06ae\0\u01c8\0\71\0\u06e7\0\u0201"+
    "\0\u0720\0\71\0\u0759\0\344\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\71\0\71\0\u0c3f\0\u0c78\0\u0cb1\0\71\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\344\0\u127b\0\u12b4\0\u12ed\0\u1326\0\344\0\u135f\0\u1398"+
    "\0\u13d1\0\71\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\344\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\344\0\344\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\344\0\u199b"+
    "\0\u19d4\0\u1a0d\0\344\0\344\0\u1a46\0\u1a7f\0\344\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\344\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\344"+
    "\0\344\0\u1e0f\0\u1e48\0\344\0\u1e81\0\u1eba\0\u1ef3\0\344"+
    "\0\344\0\344\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\344\0\344\0\u20f4\0\u212d\0\u2166\0\344"+
    "\0\344\0\344\0\u219f\0\u21d8\0\u2211\0\344\0\u224a\0\344"+
    "\0\344\0\344\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\344\0\344\0\344\0\u2412\0\u244b\0\344\0\344"+
    "\0\u2484\0\344\0\u24bd\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\5\1\35\1\5"+
    "\1\36\1\5\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\2\1\47\1\5\1\50\1\5\1\51"+
    "\1\52\5\5\72\0\3\3\72\0\1\53\7\0\12\53"+
    "\10\0\10\53\3\0\1\53\3\0\2\53\1\0\1\53"+
    "\1\0\6\53\5\0\2\5\6\0\12\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\6\0\1\6\62\0\1\7\2\0\66\7\11\0\1\54"+
    "\57\0\12\55\1\56\1\57\55\55\13\60\1\61\1\62"+
    "\54\60\5\0\2\5\6\0\1\5\1\63\10\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\4\5\1\64\5\5\10\0"+
    "\7\5\1\65\3\0\1\66\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\3\5\1\67\6\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\70\11\5\10\0"+
    "\2\5\1\71\5\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\72\1\0\6\5\5\0\2\5\6\0\6\5\1\73"+
    "\1\5\1\74\1\5\10\0\1\75\7\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\1\5\1\76\10\5\10\0\7\5\1\77\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\7\5\1\100\2\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\3\5\1\101\1\5\1\102"+
    "\2\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\3\5\1\103\6\5\10\0"+
    "\3\5\1\104\1\105\3\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\106\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\2\5"+
    "\1\107\7\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\3\5"+
    "\1\110\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\111\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\47\0\1\112\72\0\1\113"+
    "\24\0\2\5\6\0\1\5\1\114\5\5\1\115\2\5"+
    "\10\0\4\5\1\116\3\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\55\0\1\117\20\0\2\5"+
    "\6\0\12\5\10\0\4\5\1\120\3\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\12\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\121\4\5\5\0\2\53"+
    "\6\0\12\53\10\0\10\53\3\0\1\53\3\0\2\53"+
    "\1\0\1\53\1\0\6\53\11\54\1\122\57\54\2\55"+
    "\1\0\66\55\2\60\1\0\66\60\5\0\2\5\6\0"+
    "\2\5\1\123\5\5\1\124\1\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\4\5\1\125\3\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\10\5\1\126\1\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\1\5\1\127\2\5\1\130\5\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\12\5\10\0\1\131\7\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\132\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\10\5\1\133\1\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\12\5\10\0\5\5\1\134\2\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\1\5\1\135\10\5\10\0\5\5"+
    "\1\136\2\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\12\5\10\0\6\5"+
    "\1\137\1\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\12\5\10\0\5\5"+
    "\1\140\2\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\5\1\141\10\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\142\1\5\1\143"+
    "\7\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\5\5\1\144"+
    "\4\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\1\145\7\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\12\5\10\0\10\5"+
    "\3\0\1\146\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\1\147\11\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\4\5\1\150\5\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\5\5\1\151\2\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\5\5\1\152\4\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\10\5\3\0\1\153\3\0"+
    "\2\5\1\0\1\5\1\0\6\5\5\0\2\5\6\0"+
    "\1\154\11\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\7\5\1\155\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\5\5\1\156\2\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\1\157\11\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\10\5\1\160\1\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\12\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\1\161\3\5\10\0\1\162\65\0\2\5\6\0\3\5"+
    "\1\163\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\4\5\1\164\3\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\165\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\3\5"+
    "\1\166\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\4\5"+
    "\1\167\5\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\4\5"+
    "\1\170\5\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\2\5"+
    "\1\171\7\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\172"+
    "\11\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\3\5\1\173"+
    "\6\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\4\5\1\174\3\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\10\5\1\175"+
    "\1\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\1\176\7\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\6\5\1\177\3\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\5\1\200\10\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\6\5\1\201\3\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\4\5\1\202\5\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\2\5\1\203\2\5"+
    "\1\204\4\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\3\5"+
    "\1\205\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\3\5"+
    "\1\206\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\207\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\210\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\5\5"+
    "\1\211\4\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\7\5"+
    "\1\212\2\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\7\5"+
    "\1\213\2\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\1\5\1\214\6\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\4\5"+
    "\1\215\5\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\5"+
    "\1\216\10\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\10\5\3\0\1\5\3\0\1\5\1\217\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\3\5\1\220\2\5\5\0\2\5\6\0\4\5\1\221"+
    "\5\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\2\5\1\222\5\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\4\5\1\223"+
    "\5\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\5\5\1\224\2\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\1\225\7\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\5\1\226\10\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\10\5\1\227\1\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\230\11\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\5\5\1\231\4\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\12\5\10\0\1\232\7\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\6\5\1\233\3\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\7\5\1\234\2\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\2\5\1\235\7\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\236\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\10\5\1\237\1\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\1\5\1\240\10\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\7\5\1\241\2\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\12\5\10\0\1\242\7\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\2\5\1\243\7\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\7\5\1\244\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\12\5\10\0\5\5\1\245\2\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\12\5\10\0\5\5\1\246\2\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\12\5\10\0\1\247\7\5\3\0\1\5\3\0"+
    "\2\5\1\0\1\5\1\0\6\5\5\0\2\5\6\0"+
    "\3\5\1\250\6\5\10\0\10\5\3\0\1\5\3\0"+
    "\2\5\1\0\1\5\1\0\6\5\5\0\2\5\6\0"+
    "\12\5\10\0\7\5\1\251\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\252\4\5\5\0\2\5\6\0\5\5"+
    "\1\253\4\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\3\5"+
    "\1\254\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\5\5\1\255\2\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\12\5"+
    "\10\0\1\5\1\256\6\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\11\5"+
    "\1\257\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\10\5\1\260"+
    "\1\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\4\5\1\261"+
    "\5\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\10\5\1\262"+
    "\1\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\2\5\1\263"+
    "\7\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\3\5\1\264"+
    "\6\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\2\5\1\265"+
    "\7\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\1\266\11\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\1\267\11\5\10\0"+
    "\10\5\3\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\6\5\5\0\2\5\6\0\12\5\10\0\7\5\1\270"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\12\5\10\0\4\5\1\271\3\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\1\5\1\272\10\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\10\5\1\273\1\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\274\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\1\5\1\275\10\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\12\5\10\0\10\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\2\5\1\276\3\5"+
    "\5\0\2\5\6\0\1\5\1\277\10\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\300\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\301\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\4\5\1\302\5\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\5\5\1\303\4\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\10\5\1\304\1\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\3\5\1\305\6\5\10\0\10\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\1\0\6\5"+
    "\5\0\2\5\6\0\11\5\1\306\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\3\5\1\307\6\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\10\5\1\310\1\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\6\5\1\311\3\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\3\5\1\312\4\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\1\5\1\313\6\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\12\5\10\0\10\5\3\0\1\5\3\0"+
    "\2\5\1\0\1\5\1\0\4\5\1\314\1\5\5\0"+
    "\2\5\6\0\6\5\1\315\3\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\7\5\1\316\2\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\3\5\1\317\6\5\10\0\10\5\3\0"+
    "\1\5\3\0\2\5\1\0\1\5\1\0\6\5\5\0"+
    "\2\5\6\0\1\320\11\5\10\0\10\5\3\0\1\5"+
    "\3\0\2\5\1\0\1\5\1\0\6\5\5\0\2\5"+
    "\6\0\1\321\11\5\10\0\10\5\3\0\1\5\3\0"+
    "\2\5\1\0\1\5\1\0\6\5\5\0\2\5\6\0"+
    "\3\5\1\322\6\5\10\0\10\5\3\0\1\5\3\0"+
    "\2\5\1\0\1\5\1\0\6\5\5\0\2\5\6\0"+
    "\12\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\5\5\1\323\5\0\2\5\6\0\3\5"+
    "\1\324\6\5\10\0\10\5\3\0\1\5\3\0\2\5"+
    "\1\0\1\5\1\0\6\5\5\0\2\5\6\0\1\325"+
    "\11\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\12\5\10\0"+
    "\5\5\1\326\2\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\10\5\1\327"+
    "\1\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\10\5\1\330"+
    "\1\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\3\5\1\331"+
    "\6\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\4\5\1\332"+
    "\5\5\10\0\10\5\3\0\1\5\3\0\2\5\1\0"+
    "\1\5\1\0\6\5\5\0\2\5\6\0\1\333\11\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5\5\0\2\5\6\0\10\5\1\334\1\5"+
    "\10\0\10\5\3\0\1\5\3\0\2\5\1\0\1\5"+
    "\1\0\6\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\13\1\10\11\6\1\1\11"+
    "\1\1\1\11\2\1\2\11\2\1\2\0\1\11\3\0"+
    "\1\11\27\1\2\11\3\1\1\11\2\1\1\0\37\1"+
    "\1\11\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DecodeLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DecodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return ALIAS;
          }
        case 63: break;
        case 7: 
          { return STAR;
          }
        case 64: break;
        case 37: 
          { return AFTER;
          }
        case 65: break;
        case 29: 
          { return VAR;
          }
        case 66: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 67: break;
        case 62: 
          { return SUBCOMPONENT;
          }
        case 68: break;
        case 28: 
          { return ARROW;
          }
        case 69: break;
        case 31: 
          { return MULTILINE_COMMENT;
          }
        case 70: break;
        case 57: 
          { return NAMESPACE;
          }
        case 71: break;
        case 42: 
          { return NATIVE;
          }
        case 72: break;
        case 58: 
          { return PARAMETER;
          }
        case 73: break;
        case 44: 
          { return STATUS;
          }
        case 74: break;
        case 4: 
          { return NON_NEGATIVE_INTEGER;
          }
        case 75: break;
        case 48: 
          { return MEASURE_TOKEN;
          }
        case 76: break;
        case 40: 
          { return FALSE;
          }
        case 77: break;
        case 10: 
          { return LEFT_PAREN;
          }
        case 78: break;
        case 14: 
          { return COMMA;
          }
        case 79: break;
        case 16: 
          { return DOT;
          }
        case 80: break;
        case 21: 
          { return AT;
          }
        case 81: break;
        case 5: 
          { return COMMENT;
          }
        case 82: break;
        case 59: 
          { return PLACEMENT;
          }
        case 83: break;
        case 55: 
          { return LANGUAGE;
          }
        case 84: break;
        case 24: 
          { return STRING_UNARY_QUOTES;
          }
        case 85: break;
        case 61: 
          { return PARAMETERS;
          }
        case 86: break;
        case 54: 
          { return DISPLAY;
          }
        case 87: break;
        case 35: 
          { return WITH;
          }
        case 88: break;
        case 17: 
          { return COLON;
          }
        case 89: break;
        case 46: 
          { return IMPORT;
          }
        case 90: break;
        case 50: 
          { return EXTENDS;
          }
        case 91: break;
        case 6: 
          { return SLASH;
          }
        case 92: break;
        case 26: 
          { return DOTS;
          }
        case 93: break;
        case 15: 
          { return EQ_SIGN;
          }
        case 94: break;
        case 43: 
          { return SCRIPT;
          }
        case 95: break;
        case 22: 
          { return ESCAPED_NAME;
          }
        case 96: break;
        case 56: 
          { return PRIORITY;
          }
        case 97: break;
        case 8: 
          { return LEFT_BRACE;
          }
        case 98: break;
        case 49: 
          { return MESSAGE;
          }
        case 99: break;
        case 33: 
          { return TYPE_KEYWORD;
          }
        case 100: break;
        case 11: 
          { return RIGHT_PAREN;
          }
        case 101: break;
        case 53: 
          { return DYNAMIC;
          }
        case 102: break;
        case 32: 
          { return ENUM;
          }
        case 103: break;
        case 25: 
          { return AS;
          }
        case 104: break;
        case 41: 
          { return FINAL;
          }
        case 105: break;
        case 19: 
          { return MINUS;
          }
        case 106: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 107: break;
        case 45: 
          { return STRUCT;
          }
        case 108: break;
        case 60: 
          { return COMPONENT;
          }
        case 109: break;
        case 23: 
          { return STRING;
          }
        case 110: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 111: break;
        case 34: 
          { return TRUE;
          }
        case 112: break;
        case 30: 
          { return FOR;
          }
        case 113: break;
        case 39: 
          { return CONST;
          }
        case 114: break;
        case 38: 
          { return EVENT;
          }
        case 115: break;
        case 52: 
          { return DEFAULT;
          }
        case 116: break;
        case 18: 
          { return PLUS;
          }
        case 117: break;
        case 27: 
          { return SUBTYPE;
          }
        case 118: break;
        case 51: 
          { return COMMAND;
          }
        case 119: break;
        case 20: 
          { return QUESTION;
          }
        case 120: break;
        case 3: 
          { return ELEMENT_NAME_TOKEN;
          }
        case 121: break;
        case 9: 
          { return RIGHT_BRACE;
          }
        case 122: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 123: break;
        case 47: 
          { return BEFORE;
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
