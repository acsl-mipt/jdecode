namespace pixhawk

language en

alias ^float f32
alias char u8
alias uint64_t u64
alias uint16_t u16
alias uint8_t u8
alias int8_t i8
alias uint8_t_mavlink_version u8
alias int16_t i16
alias int64_t i64
alias uint32_t u32
alias int32_t i32

type heartbeat struct(
  'Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)'
  ^type                                   : uint8_t,
  'Autopilot type / class. defined in MAV_AUTOPILOT ENUM'
  autopilot                               : uint8_t,
  'System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h'
  baseMode                                : uint8_t,
  'A bitfield for use for autopilot-specific flags.'
  customMode                              : uint32_t,
  'System status flag, see MAV_STATE ENUM'
  systemStatus                            : uint8_t,
  'MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version'
  mavlinkVersion                          : uint8_t_mavlink_version,
)

type sys_status struct(
  'Bitmask showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. Indices defined by ENUM MAV_SYS_STATUS_SENSOR'
  onboardControlSensorsPresent            : uint32_t,
  'Bitmask showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR'
  onboardControlSensorsEnabled            : uint32_t,
  'Bitmask showing which onboard controllers and sensors are operational or have an error:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR'
  onboardControlSensorsHealth             : uint32_t,
  'Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000'
  load                                    : uint16_t,
  'Battery voltage, in millivolts (1 = 1 millivolt)'
  voltageBattery                          : uint16_t,
  'Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot estimate the remaining battery'
  batteryRemaining                        : int8_t,
  'Communication drops in percent, (0%: 0, 100%: 10\'000), (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)'
  dropRateComm                            : uint16_t,
  'Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)'
  errorsComm                              : uint16_t,
  'Autopilot-specific errors'
  errorsCount1                            : uint16_t,
  'Autopilot-specific errors'
  errorsCount2                            : uint16_t,
  'Autopilot-specific errors'
  errorsCount3                            : uint16_t,
  'Autopilot-specific errors'
  errorsCount4                            : uint16_t,
  'Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current'
  currentBattery                          : int16_t,
)

type system_time struct(
  'Timestamp of the master clock in microseconds since UNIX epoch.'
  timeUnixUsec                            : uint64_t,
  'Timestamp of the component clock since boot time in milliseconds.'
  timeBootMs                              : uint32_t,
)

type ping struct(
  'Unix timestamp in microseconds or since system boot if smaller than MAVLink epoch (1.1.2009)'
  timeUsec                                : uint64_t,
  'PING sequence'
  seq                                     : uint32_t,
  '0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system'
  targetSystem                            : uint8_t,
  '0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system'
  targetComponent                         : uint8_t,
)

type change_operator_control struct(
  'System the GCS requests control for'
  targetSystem                            : uint8_t,
  '0: request control of this MAV, 1: Release control of this MAV'
  controlRequest                          : uint8_t,
  '0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.'
  version                                 : uint8_t,
  'Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"'
  passkey                                 : [char, 25],
)

type change_operator_control_ack struct(
  'ID of the GCS this message '
  gcsSystemId                             : uint8_t,
  '0: request control of this MAV, 1: Release control of this MAV'
  controlRequest                          : uint8_t,
  '0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control'
  ack                                     : uint8_t,
)

type auth_key struct(
  'key'
  key                                     : [char, 32],
)

type set_mode struct(
  'The system setting the mode'
  targetSystem                            : uint8_t,
  'The new base mode'
  baseMode                                : mav_mode_uint8_t,
  'The new autopilot-specific mode. This field can be ignored by an autopilot.'
  customMode                              : uint32_t,
)

type param_request_read struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string'
  paramId                                 : [char, 16],
  'Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)'
  paramIndex                              : int16_t,
)

type param_request_list struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
)

type param_value struct(
  'Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string'
  paramId                                 : [char, 16],
  'Onboard parameter value'
  paramValue                              : ^float,
  'Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.'
  paramType                               : mav_param_type_uint8_t,
  'Total number of onboard parameters'
  paramCount                              : uint16_t,
  'Index of this onboard parameter'
  paramIndex                              : uint16_t,
)

type param_set struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string'
  paramId                                 : [char, 16],
  'Onboard parameter value'
  paramValue                              : ^float,
  'Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.'
  paramType                               : mav_param_type_uint8_t,
)

type gps_raw_int struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  '0-1: no fix, 2: 2D fix, 3: 3D fix, 4: DGPS, 5: RTK. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.'
  fixType                                 : uint8_t,
  'GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: UINT16_MAX'
  eph                                     : uint16_t,
  'GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: UINT16_MAX'
  epv                                     : uint16_t,
  'GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX'
  vel                                     : uint16_t,
  'Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX'
  cog                                     : uint16_t,
  'Number of satellites visible. If unknown, set to 255'
  satellitesVisible                       : uint8_t,
  'Latitude (WGS84), in degrees * 1E7'
  lat                                     : int32_t,
  'Longitude (WGS84), in degrees * 1E7'
  lon                                     : int32_t,
  'Altitude (AMSL, NOT WGS84), in meters * 1000 (positive for up). Note that virtually all GPS modules provide the AMSL altitude in addition to the WGS84 altitude.'
  alt                                     : int32_t,
)

type gps_status struct(
  'Number of satellites visible'
  satellitesVisible                       : uint8_t,
  'Global satellite ID'
  satellitePrn                            : [uint8_t, 20],
  '0: Satellite not used, 1: used for localization'
  satelliteUsed                           : [uint8_t, 20],
  'Elevation (0: right on top of receiver, 90: on the horizon) of satellite'
  satelliteElevation                      : [uint8_t, 20],
  'Direction of satellite, 0: 0 deg, 255: 360 deg.'
  satelliteAzimuth                        : [uint8_t, 20],
  'Signal to noise ratio of satellite'
  satelliteSnr                            : [uint8_t, 20],
)

type scaled_imu struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'X acceleration (mg)'
  xacc                                    : int16_t,
  'Y acceleration (mg)'
  yacc                                    : int16_t,
  'Z acceleration (mg)'
  zacc                                    : int16_t,
  'Angular speed around X axis (millirad /sec)'
  xgyro                                   : int16_t,
  'Angular speed around Y axis (millirad /sec)'
  ygyro                                   : int16_t,
  'Angular speed around Z axis (millirad /sec)'
  zgyro                                   : int16_t,
  'X Magnetic field (milli tesla)'
  xmag                                    : int16_t,
  'Y Magnetic field (milli tesla)'
  ymag                                    : int16_t,
  'Z Magnetic field (milli tesla)'
  zmag                                    : int16_t,
)

type raw_imu struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'X acceleration (raw)'
  xacc                                    : int16_t,
  'Y acceleration (raw)'
  yacc                                    : int16_t,
  'Z acceleration (raw)'
  zacc                                    : int16_t,
  'Angular speed around X axis (raw)'
  xgyro                                   : int16_t,
  'Angular speed around Y axis (raw)'
  ygyro                                   : int16_t,
  'Angular speed around Z axis (raw)'
  zgyro                                   : int16_t,
  'X Magnetic field (raw)'
  xmag                                    : int16_t,
  'Y Magnetic field (raw)'
  ymag                                    : int16_t,
  'Z Magnetic field (raw)'
  zmag                                    : int16_t,
)

type raw_pressure struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'Absolute pressure (raw)'
  pressAbs                                : int16_t,
  'Differential pressure 1 (raw)'
  pressDiff1                              : int16_t,
  'Differential pressure 2 (raw)'
  pressDiff2                              : int16_t,
  'Raw Temperature measurement (raw)'
  temperature                             : int16_t,
)

type scaled_pressure struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Absolute pressure (hectopascal)'
  pressAbs                                : ^float,
  'Differential pressure 1 (hectopascal)'
  pressDiff                               : ^float,
  'Temperature measurement (0.01 degrees celsius)'
  temperature                             : int16_t,
)

type attitude struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Roll angle (rad, -pi..+pi)'
  roll                                    : ^float,
  'Pitch angle (rad, -pi..+pi)'
  pitch                                   : ^float,
  'Yaw angle (rad, -pi..+pi)'
  yaw                                     : ^float,
  'Roll angular speed (rad/s)'
  rollspeed                               : ^float,
  'Pitch angular speed (rad/s)'
  pitchspeed                              : ^float,
  'Yaw angular speed (rad/s)'
  yawspeed                                : ^float,
)

type attitude_quaternion struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Quaternion component 1, w (1 in null-rotation)'
  q1                                      : ^float,
  'Quaternion component 2, x (0 in null-rotation)'
  q2                                      : ^float,
  'Quaternion component 3, y (0 in null-rotation)'
  q3                                      : ^float,
  'Quaternion component 4, z (0 in null-rotation)'
  q4                                      : ^float,
  'Roll angular speed (rad/s)'
  rollspeed                               : ^float,
  'Pitch angular speed (rad/s)'
  pitchspeed                              : ^float,
  'Yaw angular speed (rad/s)'
  yawspeed                                : ^float,
)

type local_position_ned struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'X Position'
  x                                       : ^float,
  'Y Position'
  y                                       : ^float,
  'Z Position'
  z                                       : ^float,
  'X Speed'
  vx                                      : ^float,
  'Y Speed'
  vy                                      : ^float,
  'Z Speed'
  vz                                      : ^float,
)

type global_position_int struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX'
  hdg                                     : uint16_t,
  'Latitude, expressed as * 1E7'
  lat                                     : int32_t,
  'Longitude, expressed as * 1E7'
  lon                                     : int32_t,
  'Altitude in meters, expressed as * 1000 (millimeters), AMSL (not WGS84 - note that virtually all GPS modules provide the AMSL as well)'
  alt                                     : int32_t,
  'Altitude above ground in meters, expressed as * 1000 (millimeters)'
  relativeAlt                             : int32_t,
  'Ground X Speed (Latitude), expressed as m/s * 100'
  vx                                      : int16_t,
  'Ground Y Speed (Longitude), expressed as m/s * 100'
  vy                                      : int16_t,
  'Ground Z Speed (Altitude), expressed as m/s * 100'
  vz                                      : int16_t,
)

type rc_channels_scaled struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.'
  port                                    : uint8_t,
  'Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.'
  rssi                                    : uint8_t,
  'RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan1Scaled                             : int16_t,
  'RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan2Scaled                             : int16_t,
  'RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan3Scaled                             : int16_t,
  'RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan4Scaled                             : int16_t,
  'RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan5Scaled                             : int16_t,
  'RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan6Scaled                             : int16_t,
  'RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan7Scaled                             : int16_t,
  'RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.'
  chan8Scaled                             : int16_t,
)

type rc_channels_raw struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.'
  port                                    : uint8_t,
  'RC channel 1 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan1Raw                                : uint16_t,
  'RC channel 2 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan2Raw                                : uint16_t,
  'RC channel 3 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan3Raw                                : uint16_t,
  'RC channel 4 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan4Raw                                : uint16_t,
  'RC channel 5 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan5Raw                                : uint16_t,
  'RC channel 6 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan6Raw                                : uint16_t,
  'RC channel 7 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan7Raw                                : uint16_t,
  'RC channel 8 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan8Raw                                : uint16_t,
  'Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.'
  rssi                                    : uint8_t,
)

type servo_output_raw struct(
  'Timestamp (microseconds since system boot)'
  timeUsec                                : uint32_t,
  'Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows to encode more than 8 servos.'
  port                                    : uint8_t,
  'Servo output 1 value, in microseconds'
  servo1Raw                               : uint16_t,
  'Servo output 2 value, in microseconds'
  servo2Raw                               : uint16_t,
  'Servo output 3 value, in microseconds'
  servo3Raw                               : uint16_t,
  'Servo output 4 value, in microseconds'
  servo4Raw                               : uint16_t,
  'Servo output 5 value, in microseconds'
  servo5Raw                               : uint16_t,
  'Servo output 6 value, in microseconds'
  servo6Raw                               : uint16_t,
  'Servo output 7 value, in microseconds'
  servo7Raw                               : uint16_t,
  'Servo output 8 value, in microseconds'
  servo8Raw                               : uint16_t,
)

type mission_request_partial_list struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Start index, 0 by default'
  startIndex                              : int16_t,
  'End index, -1 by default (-1: send list to end). Else a valid index of the list'
  endIndex                                : int16_t,
)

type mission_write_partial_list struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Start index, 0 by default and smaller / equal to the largest index of the current onboard list.'
  startIndex                              : int16_t,
  'End index, equal or greater than start index.'
  endIndex                                : int16_t,
)

type mission_item struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Sequence'
  seq                                     : uint16_t,
  'The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h'
  frame                                   : uint8_t,
  'The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs'
  ^command                                : uint16_t,
  'false:0, true:1'
  current                                 : uint8_t,
  'autocontinue to next wp'
  autocontinue                            : uint8_t,
  'PARAM1, see MAV_CMD enum'
  param1                                  : ^float,
  'PARAM2, see MAV_CMD enum'
  param2                                  : ^float,
  'PARAM3, see MAV_CMD enum'
  param3                                  : ^float,
  'PARAM4, see MAV_CMD enum'
  param4                                  : ^float,
  'PARAM5 / local: x position, global: latitude'
  x                                       : ^float,
  'PARAM6 / y position: global: longitude'
  y                                       : ^float,
  'PARAM7 / z position: global: altitude (relative or absolute, depending on frame.'
  z                                       : ^float,
)

type mission_request struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Sequence'
  seq                                     : uint16_t,
)

type mission_set_current struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Sequence'
  seq                                     : uint16_t,
)

type mission_current struct(
  'Sequence'
  seq                                     : uint16_t,
)

type mission_request_list struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
)

type mission_count struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Number of mission items in the sequence'
  count                                   : uint16_t,
)

type mission_clear_all struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
)

type mission_item_reached struct(
  'Sequence'
  seq                                     : uint16_t,
)

type mission_ack struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'See MAV_MISSION_RESULT enum'
  ^type                                   : mav_mission_result_uint8_t,
)

type set_gps_global_origin struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Latitude (WGS84), in degrees * 1E7'
  latitude                                : int32_t,
  'Longitude (WGS84, in degrees * 1E7'
  longitude                               : int32_t,
  'Altitude (AMSL), in meters * 1000 (positive for up)'
  altitude                                : int32_t,
)

type gps_global_origin struct(
  'Latitude (WGS84), in degrees * 1E7'
  latitude                                : int32_t,
  'Longitude (WGS84), in degrees * 1E7'
  longitude                               : int32_t,
  'Altitude (AMSL), in meters * 1000 (positive for up)'
  altitude                                : int32_t,
)

type param_map_rc struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string'
  paramId                                 : [char, 16],
  'Index of parameter RC channel. Not equal to the RC channel id. Typically correpsonds to a potentiometer-knob on the RC.'
  parameterRcChannelIndex                 : uint8_t,
  'Initial parameter value'
  paramValue0                             : ^float,
  'Scale, maps the RC range [-1, 1] to a parameter value'
  scale                                   : ^float,
  'Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)'
  paramValueMin                           : ^float,
  'Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)'
  paramValueMax                           : ^float,
  'Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.'
  paramIndex                              : int16_t,
)

type safety_set_allowed_area struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.'
  frame                                   : mav_frame_uint8_t,
  'x position 1 / Latitude 1'
  p1x                                     : ^float,
  'y position 1 / Longitude 1'
  p1y                                     : ^float,
  'z position 1 / Altitude 1'
  p1z                                     : ^float,
  'x position 2 / Latitude 2'
  p2x                                     : ^float,
  'y position 2 / Longitude 2'
  p2y                                     : ^float,
  'z position 2 / Altitude 2'
  p2z                                     : ^float,
)

type safety_allowed_area struct(
  'Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.'
  frame                                   : mav_frame_uint8_t,
  'x position 1 / Latitude 1'
  p1x                                     : ^float,
  'y position 1 / Longitude 1'
  p1y                                     : ^float,
  'z position 1 / Altitude 1'
  p1z                                     : ^float,
  'x position 2 / Latitude 2'
  p2x                                     : ^float,
  'y position 2 / Longitude 2'
  p2y                                     : ^float,
  'z position 2 / Altitude 2'
  p2z                                     : ^float,
)

type attitude_quaternion_cov struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)'
  q                                       : [^float, 4],
  'Roll angular speed (rad/s)'
  rollspeed                               : ^float,
  'Pitch angular speed (rad/s)'
  pitchspeed                              : ^float,
  'Yaw angular speed (rad/s)'
  yawspeed                                : ^float,
  'Attitude covariance'
  covariance                              : [^float, 9],
)

type nav_controller_output struct(
  'Current desired roll in degrees'
  navRoll                                 : ^float,
  'Current desired pitch in degrees'
  navPitch                                : ^float,
  'Distance to active MISSION in meters'
  wpDist                                  : uint16_t,
  'Current altitude error in meters'
  altError                                : ^float,
  'Current airspeed error in meters/second'
  aspdError                               : ^float,
  'Current crosstrack error on x-y plane in meters'
  xtrackError                             : ^float,
  'Current desired heading in degrees'
  navBearing                              : int16_t,
  'Bearing to current MISSION/target in degrees'
  targetBearing                           : int16_t,
)

type global_position_int_cov struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Timestamp (microseconds since UNIX epoch) in UTC. 0 for unknown. Commonly filled by the precision time source of a GPS receiver.'
  timeUtc                                 : uint64_t,
  'Class id of the estimator this estimate originated from.'
  estimatorType                           : mav_estimator_type_uint8_t,
  'Ground X Speed (Latitude), expressed as m/s'
  vx                                      : ^float,
  'Ground Y Speed (Longitude), expressed as m/s'
  vy                                      : ^float,
  'Ground Z Speed (Altitude), expressed as m/s'
  vz                                      : ^float,
  'Covariance matrix (first six entries are the first ROW, next six entries are the second row, etc.)'
  covariance                              : [^float, 36],
  'Latitude, expressed as degrees * 1E7'
  lat                                     : int32_t,
  'Longitude, expressed as degrees * 1E7'
  lon                                     : int32_t,
  'Altitude in meters, expressed as * 1000 (millimeters), above MSL'
  alt                                     : int32_t,
  'Altitude above ground in meters, expressed as * 1000 (millimeters)'
  relativeAlt                             : int32_t,
)

type local_position_ned_cov struct(
  'Timestamp (milliseconds since system boot). 0 for system without monotonic timestamp'
  timeBootMs                              : uint32_t,
  'Timestamp (microseconds since UNIX epoch) in UTC. 0 for unknown. Commonly filled by the precision time source of a GPS receiver.'
  timeUtc                                 : uint64_t,
  'Class id of the estimator this estimate originated from.'
  estimatorType                           : mav_estimator_type_uint8_t,
  'X Position'
  x                                       : ^float,
  'Y Position'
  y                                       : ^float,
  'Z Position'
  z                                       : ^float,
  'X Speed (m/s)'
  vx                                      : ^float,
  'Y Speed (m/s)'
  vy                                      : ^float,
  'Z Speed (m/s)'
  vz                                      : ^float,
  'X Acceleration (m/s^2)'
  ax                                      : ^float,
  'Y Acceleration (m/s^2)'
  ay                                      : ^float,
  'Z Acceleration (m/s^2)'
  az                                      : ^float,
  'Covariance matrix upper right triangular (first nine entries are the first ROW, next eight entries are the second row, etc.)'
  covariance                              : [^float, 45],
)

type rc_channels struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.'
  chancount                               : uint8_t,
  'RC channel 1 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan1Raw                                : uint16_t,
  'RC channel 2 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan2Raw                                : uint16_t,
  'RC channel 3 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan3Raw                                : uint16_t,
  'RC channel 4 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan4Raw                                : uint16_t,
  'RC channel 5 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan5Raw                                : uint16_t,
  'RC channel 6 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan6Raw                                : uint16_t,
  'RC channel 7 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan7Raw                                : uint16_t,
  'RC channel 8 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan8Raw                                : uint16_t,
  'RC channel 9 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan9Raw                                : uint16_t,
  'RC channel 10 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan10Raw                               : uint16_t,
  'RC channel 11 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan11Raw                               : uint16_t,
  'RC channel 12 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan12Raw                               : uint16_t,
  'RC channel 13 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan13Raw                               : uint16_t,
  'RC channel 14 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan14Raw                               : uint16_t,
  'RC channel 15 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan15Raw                               : uint16_t,
  'RC channel 16 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan16Raw                               : uint16_t,
  'RC channel 17 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan17Raw                               : uint16_t,
  'RC channel 18 value, in microseconds. A value of UINT16_MAX implies the channel is unused.'
  chan18Raw                               : uint16_t,
  'Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.'
  rssi                                    : uint8_t,
)

type request_data_stream struct(
  'The target requested to send the message stream.'
  targetSystem                            : uint8_t,
  'The target requested to send the message stream.'
  targetComponent                         : uint8_t,
  'The ID of the requested data stream'
  reqStreamId                             : uint8_t,
  'The requested interval between two messages of this type'
  reqMessageRate                          : uint16_t,
  '1 to start sending, 0 to stop sending.'
  startStop                               : uint8_t,
)

type data_stream struct(
  'The ID of the requested data stream'
  streamId                                : uint8_t,
  'The requested interval between two messages of this type'
  messageRate                             : uint16_t,
  '1 stream is enabled, 0 stream is stopped.'
  onOff                                   : uint8_t,
)

type manual_control struct(
  'The system to be controlled.'
  target                                  : uint8_t,
  'A bitfield corresponding to the joystick buttons\' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.'
  buttons                                 : uint16_t,
  'X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.'
  x                                       : int16_t,
  'Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.'
  y                                       : int16_t,
  'Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle.'
  z                                       : int16_t,
  'R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.'
  r                                       : int16_t,
)

type rc_channels_override struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'RC channel 1 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan1Raw                                : uint16_t,
  'RC channel 2 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan2Raw                                : uint16_t,
  'RC channel 3 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan3Raw                                : uint16_t,
  'RC channel 4 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan4Raw                                : uint16_t,
  'RC channel 5 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan5Raw                                : uint16_t,
  'RC channel 6 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan6Raw                                : uint16_t,
  'RC channel 7 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan7Raw                                : uint16_t,
  'RC channel 8 value, in microseconds. A value of UINT16_MAX means to ignore this field.'
  chan8Raw                                : uint16_t,
)

type mission_item_int struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).'
  seq                                     : uint16_t,
  'The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h'
  frame                                   : uint8_t,
  'The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs'
  ^command                                : uint16_t,
  'false:0, true:1'
  current                                 : uint8_t,
  'autocontinue to next wp'
  autocontinue                            : uint8_t,
  'PARAM1, see MAV_CMD enum'
  param1                                  : ^float,
  'PARAM2, see MAV_CMD enum'
  param2                                  : ^float,
  'PARAM3, see MAV_CMD enum'
  param3                                  : ^float,
  'PARAM4, see MAV_CMD enum'
  param4                                  : ^float,
  'PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.'
  z                                       : ^float,
  'PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7'
  x                                       : int32_t,
  'PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7'
  y                                       : int32_t,
)

type vfr_hud struct(
  'Current airspeed in m/s'
  airspeed                                : ^float,
  'Current ground speed in m/s'
  groundspeed                             : ^float,
  'Current throttle setting in integer percent, 0 to 100'
  throttle                                : uint16_t,
  'Current altitude (MSL), in meters'
  alt                                     : ^float,
  'Current climb rate in meters/second'
  climb                                   : ^float,
  'Current heading in degrees, in compass units (0..360, 0=north)'
  heading                                 : int16_t,
)

type command_int struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'The coordinate system of the COMMAND. see MAV_FRAME in mavlink_types.h'
  frame                                   : uint8_t,
  'The scheduled action for the mission item. see MAV_CMD in common.xml MAVLink specs'
  ^command                                : uint16_t,
  'false:0, true:1'
  current                                 : uint8_t,
  'autocontinue to next wp'
  autocontinue                            : uint8_t,
  'PARAM1, see MAV_CMD enum'
  param1                                  : ^float,
  'PARAM2, see MAV_CMD enum'
  param2                                  : ^float,
  'PARAM3, see MAV_CMD enum'
  param3                                  : ^float,
  'PARAM4, see MAV_CMD enum'
  param4                                  : ^float,
  'PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.'
  z                                       : ^float,
  'PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7'
  x                                       : int32_t,
  'PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7'
  y                                       : int32_t,
)

type command_long struct(
  'System which should execute the command'
  targetSystem                            : uint8_t,
  'Component which should execute the command, 0 for all components'
  targetComponent                         : uint8_t,
  'Command ID, as defined by MAV_CMD enum.'
  ^command                                : mav_cmd_uint16_t,
  '0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)'
  confirmation                            : uint8_t,
  'Parameter 1, as defined by MAV_CMD enum.'
  param1                                  : ^float,
  'Parameter 2, as defined by MAV_CMD enum.'
  param2                                  : ^float,
  'Parameter 3, as defined by MAV_CMD enum.'
  param3                                  : ^float,
  'Parameter 4, as defined by MAV_CMD enum.'
  param4                                  : ^float,
  'Parameter 5, as defined by MAV_CMD enum.'
  param5                                  : ^float,
  'Parameter 6, as defined by MAV_CMD enum.'
  param6                                  : ^float,
  'Parameter 7, as defined by MAV_CMD enum.'
  param7                                  : ^float,
)

type command_ack struct(
  'Command ID, as defined by MAV_CMD enum.'
  ^command                                : mav_cmd_uint16_t,
  'See MAV_RESULT enum'
  result                                  : uint8_t,
)

type manual_setpoint struct(
  'Timestamp in milliseconds since system boot'
  timeBootMs                              : uint32_t,
  'Desired roll rate in radians per second'
  roll                                    : ^float,
  'Desired pitch rate in radians per second'
  pitch                                   : ^float,
  'Desired yaw rate in radians per second'
  yaw                                     : ^float,
  'Collective thrust, normalized to 0 .. 1'
  thrust                                  : ^float,
  'Flight mode switch position, 0.. 255'
  modeSwitch                              : uint8_t,
  'Override mode switch position, 0.. 255'
  manualOverrideSwitch                    : uint8_t,
)

type set_attitude_target struct(
  'Timestamp in milliseconds since system boot'
  timeBootMs                              : uint32_t,
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude'
  typeMask                                : uint8_t,
  'Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)'
  q                                       : [^float, 4],
  'Body roll rate in radians per second'
  bodyRollRate                            : ^float,
  'Body roll rate in radians per second'
  bodyPitchRate                           : ^float,
  'Body roll rate in radians per second'
  bodyYawRate                             : ^float,
  'Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)'
  thrust                                  : ^float,
)

type attitude_target struct(
  'Timestamp in milliseconds since system boot'
  timeBootMs                              : uint32_t,
  'Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude'
  typeMask                                : uint8_t,
  'Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)'
  q                                       : [^float, 4],
  'Body roll rate in radians per second'
  bodyRollRate                            : ^float,
  'Body roll rate in radians per second'
  bodyPitchRate                           : ^float,
  'Body roll rate in radians per second'
  bodyYawRate                             : ^float,
  'Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)'
  thrust                                  : ^float,
)

type set_position_target_local_ned struct(
  'Timestamp in milliseconds since system boot'
  timeBootMs                              : uint32_t,
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9'
  coordinateFrame                         : mav_frame_uint8_t,
  'Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate'
  typeMask                                : uint16_t,
  'X Position in NED frame in meters'
  x                                       : ^float,
  'Y Position in NED frame in meters'
  y                                       : ^float,
  'Z Position in NED frame in meters (note, altitude is negative in NED)'
  z                                       : ^float,
  'X velocity in NED frame in meter / s'
  vx                                      : ^float,
  'Y velocity in NED frame in meter / s'
  vy                                      : ^float,
  'Z velocity in NED frame in meter / s'
  vz                                      : ^float,
  'X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afx                                     : ^float,
  'Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afy                                     : ^float,
  'Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afz                                     : ^float,
  'yaw setpoint in rad'
  yaw                                     : ^float,
  'yaw rate setpoint in rad/s'
  yawRate                                 : ^float,
)

type position_target_local_ned struct(
  'Timestamp in milliseconds since system boot'
  timeBootMs                              : uint32_t,
  'Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9'
  coordinateFrame                         : mav_frame_uint8_t,
  'Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate'
  typeMask                                : uint16_t,
  'X Position in NED frame in meters'
  x                                       : ^float,
  'Y Position in NED frame in meters'
  y                                       : ^float,
  'Z Position in NED frame in meters (note, altitude is negative in NED)'
  z                                       : ^float,
  'X velocity in NED frame in meter / s'
  vx                                      : ^float,
  'Y velocity in NED frame in meter / s'
  vy                                      : ^float,
  'Z velocity in NED frame in meter / s'
  vz                                      : ^float,
  'X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afx                                     : ^float,
  'Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afy                                     : ^float,
  'Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afz                                     : ^float,
  'yaw setpoint in rad'
  yaw                                     : ^float,
  'yaw rate setpoint in rad/s'
  yawRate                                 : ^float,
)

type set_position_target_global_int struct(
  'Timestamp in milliseconds since system boot. The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.'
  timeBootMs                              : uint32_t,
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11'
  coordinateFrame                         : mav_frame_uint8_t,
  'Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate'
  typeMask                                : uint16_t,
  'Altitude in meters in AMSL altitude, not WGS84 if absolute or relative, above terrain if GLOBAL_TERRAIN_ALT_INT'
  alt                                     : ^float,
  'X velocity in NED frame in meter / s'
  vx                                      : ^float,
  'Y velocity in NED frame in meter / s'
  vy                                      : ^float,
  'Z velocity in NED frame in meter / s'
  vz                                      : ^float,
  'X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afx                                     : ^float,
  'Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afy                                     : ^float,
  'Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afz                                     : ^float,
  'yaw setpoint in rad'
  yaw                                     : ^float,
  'yaw rate setpoint in rad/s'
  yawRate                                 : ^float,
  'X Position in WGS84 frame in 1e7 * meters'
  latInt                                  : int32_t,
  'Y Position in WGS84 frame in 1e7 * meters'
  lonInt                                  : int32_t,
)

type position_target_global_int struct(
  'Timestamp in milliseconds since system boot. The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.'
  timeBootMs                              : uint32_t,
  'Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11'
  coordinateFrame                         : mav_frame_uint8_t,
  'Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate'
  typeMask                                : uint16_t,
  'Altitude in meters in AMSL altitude, not WGS84 if absolute or relative, above terrain if GLOBAL_TERRAIN_ALT_INT'
  alt                                     : ^float,
  'X velocity in NED frame in meter / s'
  vx                                      : ^float,
  'Y velocity in NED frame in meter / s'
  vy                                      : ^float,
  'Z velocity in NED frame in meter / s'
  vz                                      : ^float,
  'X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afx                                     : ^float,
  'Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afy                                     : ^float,
  'Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N'
  afz                                     : ^float,
  'yaw setpoint in rad'
  yaw                                     : ^float,
  'yaw rate setpoint in rad/s'
  yawRate                                 : ^float,
  'X Position in WGS84 frame in 1e7 * meters'
  latInt                                  : int32_t,
  'Y Position in WGS84 frame in 1e7 * meters'
  lonInt                                  : int32_t,
)

type local_position_ned_system_global_offset struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'X Position'
  x                                       : ^float,
  'Y Position'
  y                                       : ^float,
  'Z Position'
  z                                       : ^float,
  'Roll'
  roll                                    : ^float,
  'Pitch'
  pitch                                   : ^float,
  'Yaw'
  yaw                                     : ^float,
)

type hil_state struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'Roll angle (rad)'
  roll                                    : ^float,
  'Pitch angle (rad)'
  pitch                                   : ^float,
  'Yaw angle (rad)'
  yaw                                     : ^float,
  'Body frame roll / phi angular speed (rad/s)'
  rollspeed                               : ^float,
  'Body frame pitch / theta angular speed (rad/s)'
  pitchspeed                              : ^float,
  'Body frame yaw / psi angular speed (rad/s)'
  yawspeed                                : ^float,
  'Latitude, expressed as * 1E7'
  lat                                     : int32_t,
  'Longitude, expressed as * 1E7'
  lon                                     : int32_t,
  'Altitude in meters, expressed as * 1000 (millimeters)'
  alt                                     : int32_t,
  'Ground X Speed (Latitude), expressed as m/s * 100'
  vx                                      : int16_t,
  'Ground Y Speed (Longitude), expressed as m/s * 100'
  vy                                      : int16_t,
  'Ground Z Speed (Altitude), expressed as m/s * 100'
  vz                                      : int16_t,
  'X acceleration (mg)'
  xacc                                    : int16_t,
  'Y acceleration (mg)'
  yacc                                    : int16_t,
  'Z acceleration (mg)'
  zacc                                    : int16_t,
)

type hil_controls struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'Control output -1 .. 1'
  rollAilerons                            : ^float,
  'Control output -1 .. 1'
  pitchElevator                           : ^float,
  'Control output -1 .. 1'
  yawRudder                               : ^float,
  'Throttle 0 .. 1'
  throttle                                : ^float,
  'Aux 1, -1 .. 1'
  aux1                                    : ^float,
  'Aux 2, -1 .. 1'
  aux2                                    : ^float,
  'Aux 3, -1 .. 1'
  aux3                                    : ^float,
  'Aux 4, -1 .. 1'
  aux4                                    : ^float,
  'System mode (MAV_MODE)'
  mode                                    : uint8_t,
  'Navigation mode (MAV_NAV_MODE)'
  navMode                                 : uint8_t,
)

type hil_rc_inputs_raw struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'RC channel 1 value, in microseconds'
  chan1Raw                                : uint16_t,
  'RC channel 2 value, in microseconds'
  chan2Raw                                : uint16_t,
  'RC channel 3 value, in microseconds'
  chan3Raw                                : uint16_t,
  'RC channel 4 value, in microseconds'
  chan4Raw                                : uint16_t,
  'RC channel 5 value, in microseconds'
  chan5Raw                                : uint16_t,
  'RC channel 6 value, in microseconds'
  chan6Raw                                : uint16_t,
  'RC channel 7 value, in microseconds'
  chan7Raw                                : uint16_t,
  'RC channel 8 value, in microseconds'
  chan8Raw                                : uint16_t,
  'RC channel 9 value, in microseconds'
  chan9Raw                                : uint16_t,
  'RC channel 10 value, in microseconds'
  chan10Raw                               : uint16_t,
  'RC channel 11 value, in microseconds'
  chan11Raw                               : uint16_t,
  'RC channel 12 value, in microseconds'
  chan12Raw                               : uint16_t,
  'Receive signal strength indicator, 0: 0%, 255: 100%'
  rssi                                    : uint8_t,
)

type optical_flow struct(
  'Timestamp (UNIX)'
  timeUsec                                : uint64_t,
  'Sensor ID'
  sensorId                                : uint8_t,
  'Flow in meters in x-sensor direction, angular-speed compensated'
  flowCompMX                              : ^float,
  'Flow in meters in y-sensor direction, angular-speed compensated'
  flowCompMY                              : ^float,
  'Optical flow quality / confidence. 0: bad, 255: maximum quality'
  quality                                 : uint8_t,
  'Ground distance in meters. Positive value: distance known. Negative value: Unknown distance'
  groundDistance                          : ^float,
  'Flow in pixels * 10 in x-sensor direction (dezi-pixels)'
  flowX                                   : int16_t,
  'Flow in pixels * 10 in y-sensor direction (dezi-pixels)'
  flowY                                   : int16_t,
)

type global_vision_position_estimate struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  usec                                    : uint64_t,
  'Global X position'
  x                                       : ^float,
  'Global Y position'
  y                                       : ^float,
  'Global Z position'
  z                                       : ^float,
  'Roll angle in rad'
  roll                                    : ^float,
  'Pitch angle in rad'
  pitch                                   : ^float,
  'Yaw angle in rad'
  yaw                                     : ^float,
)

type vision_position_estimate struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  usec                                    : uint64_t,
  'Global X position'
  x                                       : ^float,
  'Global Y position'
  y                                       : ^float,
  'Global Z position'
  z                                       : ^float,
  'Roll angle in rad'
  roll                                    : ^float,
  'Pitch angle in rad'
  pitch                                   : ^float,
  'Yaw angle in rad'
  yaw                                     : ^float,
)

type vision_speed_estimate struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  usec                                    : uint64_t,
  'Global X speed'
  x                                       : ^float,
  'Global Y speed'
  y                                       : ^float,
  'Global Z speed'
  z                                       : ^float,
)

type vicon_position_estimate struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  usec                                    : uint64_t,
  'Global X position'
  x                                       : ^float,
  'Global Y position'
  y                                       : ^float,
  'Global Z position'
  z                                       : ^float,
  'Roll angle in rad'
  roll                                    : ^float,
  'Pitch angle in rad'
  pitch                                   : ^float,
  'Yaw angle in rad'
  yaw                                     : ^float,
)

type highres_imu struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  timeUsec                                : uint64_t,
  'X acceleration (m/s^2)'
  xacc                                    : ^float,
  'Y acceleration (m/s^2)'
  yacc                                    : ^float,
  'Z acceleration (m/s^2)'
  zacc                                    : ^float,
  'Angular speed around X axis (rad / sec)'
  xgyro                                   : ^float,
  'Angular speed around Y axis (rad / sec)'
  ygyro                                   : ^float,
  'Angular speed around Z axis (rad / sec)'
  zgyro                                   : ^float,
  'X Magnetic field (Gauss)'
  xmag                                    : ^float,
  'Y Magnetic field (Gauss)'
  ymag                                    : ^float,
  'Z Magnetic field (Gauss)'
  zmag                                    : ^float,
  'Absolute pressure in millibar'
  absPressure                             : ^float,
  'Differential pressure in millibar'
  diffPressure                            : ^float,
  'Altitude calculated from pressure'
  pressureAlt                             : ^float,
  'Temperature in degrees celsius'
  temperature                             : ^float,
  'Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature'
  fieldsUpdated                           : uint16_t,
)

type optical_flow_rad struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  timeUsec                                : uint64_t,
  'Sensor ID'
  sensorId                                : uint8_t,
  'Integration time in microseconds. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.'
  integrationTimeUs                       : uint32_t,
  'Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)'
  integratedX                             : ^float,
  'Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)'
  integratedY                             : ^float,
  'RH rotation around X axis (rad)'
  integratedXgyro                         : ^float,
  'RH rotation around Y axis (rad)'
  integratedYgyro                         : ^float,
  'RH rotation around Z axis (rad)'
  integratedZgyro                         : ^float,
  'Optical flow quality / confidence. 0: no valid flow, 255: maximum quality'
  quality                                 : uint8_t,
  'Time in microseconds since the distance was sampled.'
  timeDeltaDistanceUs                     : uint32_t,
  'Distance to the center of the flow field in meters. Positive value (including zero): distance known. Negative value: Unknown distance.'
  distance                                : ^float,
  'Temperature * 100 in centi-degrees Celsius'
  temperature                             : int16_t,
)

type hil_sensor struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  timeUsec                                : uint64_t,
  'X acceleration (m/s^2)'
  xacc                                    : ^float,
  'Y acceleration (m/s^2)'
  yacc                                    : ^float,
  'Z acceleration (m/s^2)'
  zacc                                    : ^float,
  'Angular speed around X axis in body frame (rad / sec)'
  xgyro                                   : ^float,
  'Angular speed around Y axis in body frame (rad / sec)'
  ygyro                                   : ^float,
  'Angular speed around Z axis in body frame (rad / sec)'
  zgyro                                   : ^float,
  'X Magnetic field (Gauss)'
  xmag                                    : ^float,
  'Y Magnetic field (Gauss)'
  ymag                                    : ^float,
  'Z Magnetic field (Gauss)'
  zmag                                    : ^float,
  'Absolute pressure in millibar'
  absPressure                             : ^float,
  'Differential pressure (airspeed) in millibar'
  diffPressure                            : ^float,
  'Altitude calculated from pressure'
  pressureAlt                             : ^float,
  'Temperature in degrees celsius'
  temperature                             : ^float,
  'Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature'
  fieldsUpdated                           : uint32_t,
)

type sim_state struct(
  'True attitude quaternion component 1, w (1 in null-rotation)'
  q1                                      : ^float,
  'True attitude quaternion component 2, x (0 in null-rotation)'
  q2                                      : ^float,
  'True attitude quaternion component 3, y (0 in null-rotation)'
  q3                                      : ^float,
  'True attitude quaternion component 4, z (0 in null-rotation)'
  q4                                      : ^float,
  'Attitude roll expressed as Euler angles, not recommended except for human-readable outputs'
  roll                                    : ^float,
  'Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs'
  pitch                                   : ^float,
  'Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs'
  yaw                                     : ^float,
  'X acceleration m/s/s'
  xacc                                    : ^float,
  'Y acceleration m/s/s'
  yacc                                    : ^float,
  'Z acceleration m/s/s'
  zacc                                    : ^float,
  'Angular speed around X axis rad/s'
  xgyro                                   : ^float,
  'Angular speed around Y axis rad/s'
  ygyro                                   : ^float,
  'Angular speed around Z axis rad/s'
  zgyro                                   : ^float,
  'Latitude in degrees'
  lat                                     : ^float,
  'Longitude in degrees'
  lon                                     : ^float,
  'Altitude in meters'
  alt                                     : ^float,
  'Horizontal position standard deviation'
  stdDevHorz                              : ^float,
  'Vertical position standard deviation'
  stdDevVert                              : ^float,
  'True velocity in m/s in NORTH direction in earth-fixed NED frame'
  vn                                      : ^float,
  'True velocity in m/s in EAST direction in earth-fixed NED frame'
  ve                                      : ^float,
  'True velocity in m/s in DOWN direction in earth-fixed NED frame'
  vd                                      : ^float,
)

type radio_status struct(
  'Local signal strength'
  rssi                                    : uint8_t,
  'Remote signal strength'
  remrssi                                 : uint8_t,
  'Remaining free buffer space in percent.'
  txbuf                                   : uint8_t,
  'Background noise level'
  noise                                   : uint8_t,
  'Remote background noise level'
  remnoise                                : uint8_t,
  'Receive errors'
  rxerrors                                : uint16_t,
  'Count of error corrected packets'
  fixed                                   : uint16_t,
)

type file_transfer_protocol struct(
  'Network ID (0 for broadcast)'
  targetNetwork                           : uint8_t,
  'System ID (0 for broadcast)'
  targetSystem                            : uint8_t,
  'Component ID (0 for broadcast)'
  targetComponent                         : uint8_t,
  'Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as name of the mavlink specification.'
  payload                                 : [uint8_t, 251],
)

type timesync struct(
  'Time sync timestamp 1'
  tc1                                     : int64_t,
  'Time sync timestamp 2'
  ts1                                     : int64_t,
)

type camera_trigger struct(
  'Timestamp for the image frame in microseconds'
  timeUsec                                : uint64_t,
  'Image frame sequence'
  seq                                     : uint32_t,
)

type hil_gps struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  '0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.'
  fixType                                 : uint8_t,
  'GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: 65535'
  eph                                     : uint16_t,
  'GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: 65535'
  epv                                     : uint16_t,
  'GPS ground speed (m/s * 100). If unknown, set to: 65535'
  vel                                     : uint16_t,
  'Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: 65535'
  cog                                     : uint16_t,
  'Number of satellites visible. If unknown, set to 255'
  satellitesVisible                       : uint8_t,
  'Latitude (WGS84), in degrees * 1E7'
  lat                                     : int32_t,
  'Longitude (WGS84), in degrees * 1E7'
  lon                                     : int32_t,
  'Altitude (AMSL, not WGS84), in meters * 1000 (positive for up)'
  alt                                     : int32_t,
  'GPS velocity in cm/s in NORTH direction in earth-fixed NED frame'
  vn                                      : int16_t,
  'GPS velocity in cm/s in EAST direction in earth-fixed NED frame'
  ve                                      : int16_t,
  'GPS velocity in cm/s in DOWN direction in earth-fixed NED frame'
  vd                                      : int16_t,
)

type hil_optical_flow struct(
  'Timestamp (microseconds, synced to UNIX time or since system boot)'
  timeUsec                                : uint64_t,
  'Sensor ID'
  sensorId                                : uint8_t,
  'Integration time in microseconds. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.'
  integrationTimeUs                       : uint32_t,
  'Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)'
  integratedX                             : ^float,
  'Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)'
  integratedY                             : ^float,
  'RH rotation around X axis (rad)'
  integratedXgyro                         : ^float,
  'RH rotation around Y axis (rad)'
  integratedYgyro                         : ^float,
  'RH rotation around Z axis (rad)'
  integratedZgyro                         : ^float,
  'Optical flow quality / confidence. 0: no valid flow, 255: maximum quality'
  quality                                 : uint8_t,
  'Time in microseconds since the distance was sampled.'
  timeDeltaDistanceUs                     : uint32_t,
  'Distance to the center of the flow field in meters. Positive value (including zero): distance known. Negative value: Unknown distance.'
  distance                                : ^float,
  'Temperature * 100 in centi-degrees Celsius'
  temperature                             : int16_t,
)

type hil_state_quaternion struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  'Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)'
  attitudeQuaternion                      : [^float, 4],
  'Body frame roll / phi angular speed (rad/s)'
  rollspeed                               : ^float,
  'Body frame pitch / theta angular speed (rad/s)'
  pitchspeed                              : ^float,
  'Body frame yaw / psi angular speed (rad/s)'
  yawspeed                                : ^float,
  'Indicated airspeed, expressed as m/s * 100'
  indAirspeed                             : uint16_t,
  'True airspeed, expressed as m/s * 100'
  trueAirspeed                            : uint16_t,
  'Latitude, expressed as * 1E7'
  lat                                     : int32_t,
  'Longitude, expressed as * 1E7'
  lon                                     : int32_t,
  'Altitude in meters, expressed as * 1000 (millimeters)'
  alt                                     : int32_t,
  'Ground X Speed (Latitude), expressed as m/s * 100'
  vx                                      : int16_t,
  'Ground Y Speed (Longitude), expressed as m/s * 100'
  vy                                      : int16_t,
  'Ground Z Speed (Altitude), expressed as m/s * 100'
  vz                                      : int16_t,
  'X acceleration (mg)'
  xacc                                    : int16_t,
  'Y acceleration (mg)'
  yacc                                    : int16_t,
  'Z acceleration (mg)'
  zacc                                    : int16_t,
)

type scaled_imu2 struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'X acceleration (mg)'
  xacc                                    : int16_t,
  'Y acceleration (mg)'
  yacc                                    : int16_t,
  'Z acceleration (mg)'
  zacc                                    : int16_t,
  'Angular speed around X axis (millirad /sec)'
  xgyro                                   : int16_t,
  'Angular speed around Y axis (millirad /sec)'
  ygyro                                   : int16_t,
  'Angular speed around Z axis (millirad /sec)'
  zgyro                                   : int16_t,
  'X Magnetic field (milli tesla)'
  xmag                                    : int16_t,
  'Y Magnetic field (milli tesla)'
  ymag                                    : int16_t,
  'Z Magnetic field (milli tesla)'
  zmag                                    : int16_t,
)

type log_request_list struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'First log id (0 for first available)'
  start                                   : uint16_t,
  'Last log id (0xffff for last available)'
  end                                     : uint16_t,
)

type log_entry struct(
  'Log id'
  ^id                                     : uint16_t,
  'Total number of logs'
  numLogs                                 : uint16_t,
  'High log number'
  lastLogNum                              : uint16_t,
  'UTC timestamp of log in seconds since 1970, or 0 if not available'
  timeUtc                                 : uint32_t,
  'Size of the log (may be approximate) in bytes'
  size                                    : uint32_t,
)

type log_request_data struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Log id (from LOG_ENTRY reply)'
  ^id                                     : uint16_t,
  'Offset into the log'
  ofs                                     : uint32_t,
  'Number of bytes'
  count                                   : uint32_t,
)

type log_data struct(
  'Log id (from LOG_ENTRY reply)'
  ^id                                     : uint16_t,
  'Offset into the log'
  ofs                                     : uint32_t,
  'Number of bytes (zero for end of log)'
  count                                   : uint8_t,
  'log data'
  data                                    : [uint8_t, 90],
)

type log_erase struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
)

type log_request_end struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
)

type gps_inject_data struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'data length'
  len                                     : uint8_t,
  'raw data (110 is enough for 12 satellites of RTCMv2)'
  data                                    : [uint8_t, 110],
)

type gps2_raw struct(
  'Timestamp (microseconds since UNIX epoch or microseconds since system boot)'
  timeUsec                                : uint64_t,
  '0-1: no fix, 2: 2D fix, 3: 3D fix, 4: DGPS fix, 5: RTK Fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.'
  fixType                                 : uint8_t,
  'GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: UINT16_MAX'
  eph                                     : uint16_t,
  'GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: UINT16_MAX'
  epv                                     : uint16_t,
  'GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX'
  vel                                     : uint16_t,
  'Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX'
  cog                                     : uint16_t,
  'Number of satellites visible. If unknown, set to 255'
  satellitesVisible                       : uint8_t,
  'Number of DGPS satellites'
  dgpsNumch                               : uint8_t,
  'Age of DGPS info'
  dgpsAge                                 : uint32_t,
  'Latitude (WGS84), in degrees * 1E7'
  lat                                     : int32_t,
  'Longitude (WGS84), in degrees * 1E7'
  lon                                     : int32_t,
  'Altitude (AMSL, not WGS84), in meters * 1000 (positive for up)'
  alt                                     : int32_t,
)

type power_status struct(
  '5V rail voltage in millivolts'
  vcc                                     : uint16_t,
  'servo rail voltage in millivolts'
  vservo                                  : uint16_t,
  'power supply status flags (see MAV_POWER_STATUS enum)'
  flags                                   : uint16_t,
)

type serial_control struct(
  'See SERIAL_CONTROL_DEV enum'
  device                                  : uint8_t,
  'See SERIAL_CONTROL_FLAG enum'
  flags                                   : uint8_t,
  'Timeout for reply data in milliseconds'
  timeout                                 : uint16_t,
  'Baudrate of transfer. Zero means no change.'
  baudrate                                : uint32_t,
  'how many bytes in this transfer'
  count                                   : uint8_t,
  'serial data'
  data                                    : [uint8_t, 70],
)

type gps_rtk struct(
  'Time since boot of last baseline message received in ms.'
  timeLastBaselineMs                      : uint32_t,
  'Identification of connected RTK receiver.'
  rtkReceiverId                           : uint8_t,
  'GPS Week Number of last baseline'
  wn                                      : uint16_t,
  'GPS Time of Week of last baseline'
  tow                                     : uint32_t,
  'GPS-specific health report for RTK data.'
  rtkHealth                               : uint8_t,
  'Rate of baseline messages being received by GPS, in HZ'
  rtkRate                                 : uint8_t,
  'Current number of sats used for RTK calculation.'
  nsats                                   : uint8_t,
  'Coordinate system of baseline. 0 == ECEF, 1 == NED'
  baselineCoordsType                      : uint8_t,
  'Current estimate of baseline accuracy.'
  accuracy                                : uint32_t,
  'Current baseline in ECEF x or NED north component in mm.'
  baselineAMm                             : int32_t,
  'Current baseline in ECEF y or NED east component in mm.'
  baselineBMm                             : int32_t,
  'Current baseline in ECEF z or NED down component in mm.'
  baselineCMm                             : int32_t,
  'Current number of integer ambiguity hypotheses.'
  iarNumHypotheses                        : int32_t,
)

type gps2_rtk struct(
  'Time since boot of last baseline message received in ms.'
  timeLastBaselineMs                      : uint32_t,
  'Identification of connected RTK receiver.'
  rtkReceiverId                           : uint8_t,
  'GPS Week Number of last baseline'
  wn                                      : uint16_t,
  'GPS Time of Week of last baseline'
  tow                                     : uint32_t,
  'GPS-specific health report for RTK data.'
  rtkHealth                               : uint8_t,
  'Rate of baseline messages being received by GPS, in HZ'
  rtkRate                                 : uint8_t,
  'Current number of sats used for RTK calculation.'
  nsats                                   : uint8_t,
  'Coordinate system of baseline. 0 == ECEF, 1 == NED'
  baselineCoordsType                      : uint8_t,
  'Current estimate of baseline accuracy.'
  accuracy                                : uint32_t,
  'Current baseline in ECEF x or NED north component in mm.'
  baselineAMm                             : int32_t,
  'Current baseline in ECEF y or NED east component in mm.'
  baselineBMm                             : int32_t,
  'Current baseline in ECEF z or NED down component in mm.'
  baselineCMm                             : int32_t,
  'Current number of integer ambiguity hypotheses.'
  iarNumHypotheses                        : int32_t,
)

type scaled_imu3 struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'X acceleration (mg)'
  xacc                                    : int16_t,
  'Y acceleration (mg)'
  yacc                                    : int16_t,
  'Z acceleration (mg)'
  zacc                                    : int16_t,
  'Angular speed around X axis (millirad /sec)'
  xgyro                                   : int16_t,
  'Angular speed around Y axis (millirad /sec)'
  ygyro                                   : int16_t,
  'Angular speed around Z axis (millirad /sec)'
  zgyro                                   : int16_t,
  'X Magnetic field (milli tesla)'
  xmag                                    : int16_t,
  'Y Magnetic field (milli tesla)'
  ymag                                    : int16_t,
  'Z Magnetic field (milli tesla)'
  zmag                                    : int16_t,
)

type data_transmission_handshake struct(
  'type of requested/acknowledged data (as defined in ENUM DATA_TYPES in mavlink/include/mavlink_types.h)'
  ^type                                   : uint8_t,
  'total data size in bytes (set on ACK only)'
  size                                    : uint32_t,
  'Width of a matrix or image'
  width                                   : uint16_t,
  'Height of a matrix or image'
  height                                  : uint16_t,
  'number of packets beeing sent (set on ACK only)'
  packets                                 : uint16_t,
  'payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only)'
  payload                                 : uint8_t,
  'JPEG quality out of [1,100]'
  jpgQuality                              : uint8_t,
)

type encapsulated_data struct(
  'sequence number (starting with 0 on every transmission)'
  seqnr                                   : uint16_t,
  'image data bytes'
  data                                    : [uint8_t, 253],
)

type distance_sensor struct(
  'Time since system boot'
  timeBootMs                              : uint32_t,
  'Minimum distance the sensor can measure in centimeters'
  minDistance                             : uint16_t,
  'Maximum distance the sensor can measure in centimeters'
  maxDistance                             : uint16_t,
  'Current distance reading'
  currentDistance                         : uint16_t,
  'Type from MAV_DISTANCE_SENSOR enum.'
  ^type                                   : uint8_t,
  'Onboard ID of the sensor'
  ^id                                     : uint8_t,
  'Direction the sensor faces from FIXME enum.'
  orientation                             : uint8_t,
  'Measurement covariance in centimeters, 0 for unknown / invalid readings'
  covariance                              : uint8_t,
)

type terrain_request struct(
  'Grid spacing in meters'
  gridSpacing                             : uint16_t,
  'Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)'
  mask                                    : uint64_t,
  'Latitude of SW corner of first grid (degrees *10^7)'
  lat                                     : int32_t,
  'Longitude of SW corner of first grid (in degrees *10^7)'
  lon                                     : int32_t,
)

type terrain_data struct(
  'Grid spacing in meters'
  gridSpacing                             : uint16_t,
  'bit within the terrain request mask'
  gridbit                                 : uint8_t,
  'Terrain data in meters AMSL'
  data                                    : [int16_t, 16],
  'Latitude of SW corner of first grid (degrees *10^7)'
  lat                                     : int32_t,
  'Longitude of SW corner of first grid (in degrees *10^7)'
  lon                                     : int32_t,
)

type terrain_check struct(
  'Latitude (degrees *10^7)'
  lat                                     : int32_t,
  'Longitude (degrees *10^7)'
  lon                                     : int32_t,
)

type terrain_report struct(
  'grid spacing (zero if terrain at this location unavailable)'
  spacing                                 : uint16_t,
  'Terrain height in meters AMSL'
  terrainHeight                           : ^float,
  'Current vehicle height above lat/lon terrain height (meters)'
  currentHeight                           : ^float,
  'Number of 4x4 terrain blocks waiting to be received or read from disk'
  pending                                 : uint16_t,
  'Number of 4x4 terrain blocks in memory'
  loaded                                  : uint16_t,
  'Latitude (degrees *10^7)'
  lat                                     : int32_t,
  'Longitude (degrees *10^7)'
  lon                                     : int32_t,
)

type scaled_pressure2 struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Absolute pressure (hectopascal)'
  pressAbs                                : ^float,
  'Differential pressure 1 (hectopascal)'
  pressDiff                               : ^float,
  'Temperature measurement (0.01 degrees celsius)'
  temperature                             : int16_t,
)

type att_pos_mocap struct(
  'Timestamp (micros since boot or Unix epoch)'
  timeUsec                                : uint64_t,
  'Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)'
  q                                       : [^float, 4],
  'X position in meters (NED)'
  x                                       : ^float,
  'Y position in meters (NED)'
  y                                       : ^float,
  'Z position in meters (NED)'
  z                                       : ^float,
)

type set_actuator_control_target struct(
  'Timestamp (micros since boot or Unix epoch)'
  timeUsec                                : uint64_t,
  'Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.'
  groupMlx                                : uint8_t,
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.'
  controls                                : [^float, 8],
)

type actuator_control_target struct(
  'Timestamp (micros since boot or Unix epoch)'
  timeUsec                                : uint64_t,
  'Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.'
  groupMlx                                : uint8_t,
  'Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.'
  controls                                : [^float, 8],
)

type battery_status struct(
  'Battery ID'
  ^id                                     : uint8_t,
  'Function of the battery'
  batteryFunction                         : mav_battery_function_uint8_t,
  'Type (chemistry) of the battery'
  ^type                                   : mav_battery_type_uint8_t,
  'Battery voltage of cells, in millivolts (1 = 1 millivolt)'
  voltages                                : [uint16_t, 10],
  'Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery'
  batteryRemaining                        : int8_t,
  'Consumed charge, in milliampere hours (1 = 1 mAh), -1: autopilot does not provide mAh consumption estimate'
  currentConsumed                         : int32_t,
  'Consumed energy, in 100*Joules (intergrated U*I*dt)  (1 = 100 Joule), -1: autopilot does not provide energy consumption estimate'
  energyConsumed                          : int32_t,
  'Temperature of the battery in centi-degrees celsius. INT16_MAX for unknown temperature.'
  temperature                             : int16_t,
  'Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current'
  currentBattery                          : int16_t,
)

type autopilot_version struct(
  'bitmask of capabilities (see MAV_PROTOCOL_CAPABILITY enum)'
  capabilities                            : uint64_t,
  'Firmware version number'
  flightSwVersion                         : uint32_t,
  'Middleware version number'
  middlewareSwVersion                     : uint32_t,
  'Operating system version number'
  osSwVersion                             : uint32_t,
  'HW / board version (last 8 bytes should be silicon ID, if any)'
  boardVersion                            : uint32_t,
  'Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.'
  flightCustomVersion                     : [uint8_t, 8],
  'Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.'
  middlewareCustomVersion                 : [uint8_t, 8],
  'Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.'
  osCustomVersion                         : [uint8_t, 8],
  'ID of the board vendor'
  vendorId                                : uint16_t,
  'ID of the product'
  productId                               : uint16_t,
  'UID if provided by hardware'
  uid                                     : uint64_t,
)

type v2_extension struct(
  'Network ID (0 for broadcast)'
  targetNetwork                           : uint8_t,
  'System ID (0 for broadcast)'
  targetSystem                            : uint8_t,
  'Component ID (0 for broadcast)'
  targetComponent                         : uint8_t,
  'A code that identifies the software component that understands this message (analogous to usb device classes or mime type strings).  If this code is less than 32768, it is considered a \'registered\' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/extension-message-ids.xml.  Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.'
  messageType                             : uint16_t,
  'Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as name of the mavlink specification.'
  payload                                 : [uint8_t, 249],
)

type memory_vect struct(
  'Starting address of the debug variables'
  address                                 : uint16_t,
  'Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below'
  ver                                     : uint8_t,
  'Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14'
  ^type                                   : uint8_t,
  'Memory contents at specified address'
  value                                   : [int8_t, 32],
)

type debug_vect struct(
  'Name'
  name                                    : [char, 10],
  'Timestamp'
  timeUsec                                : uint64_t,
  'x'
  x                                       : ^float,
  'y'
  y                                       : ^float,
  'z'
  z                                       : ^float,
)

type named_value_float struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Name of the debug variable'
  name                                    : [char, 10],
  'Floating point value'
  value                                   : ^float,
)

type named_value_int struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'Name of the debug variable'
  name                                    : [char, 10],
  'Signed integer value'
  value                                   : int32_t,
)

type statustext struct(
  'Severity of status. Relies on the definitions within RFC-5424. See enum MAV_SEVERITY.'
  severity                                : mav_severity_uint8_t,
  'Status text message, without null termination character'
  text                                    : [char, 50],
)

type debug struct(
  'Timestamp (milliseconds since system boot)'
  timeBootMs                              : uint32_t,
  'index of debug variable'
  ind                                     : uint8_t,
  'DEBUG value'
  value                                   : ^float,
)

type set_cam_shutter struct(
  'Camera id'
  camNo                                   : uint8_t,
  'Camera mode: 0 = auto, 1 = manual'
  camMode                                 : uint8_t,
  'Trigger pin, 0-3 for PtGrey FireFly'
  triggerPin                              : uint8_t,
  'Shutter interval, in microseconds'
  interval                                : uint16_t,
  'Exposure time, in microseconds'
  exposure                                : uint16_t,
  'Camera gain'
  gain                                    : ^float,
)

type image_triggered struct(
  'Timestamp'
  timestamp                               : uint64_t,
  'IMU seq'
  seq                                     : uint32_t,
  'Roll angle in rad'
  roll                                    : ^float,
  'Pitch angle in rad'
  pitch                                   : ^float,
  'Yaw angle in rad'
  yaw                                     : ^float,
  'Local frame Z coordinate (height over ground)'
  localZ                                  : ^float,
  'GPS X coordinate'
  lat                                     : ^float,
  'GPS Y coordinate'
  lon                                     : ^float,
  'Global frame altitude'
  alt                                     : ^float,
  'Ground truth X'
  groundX                                 : ^float,
  'Ground truth Y'
  groundY                                 : ^float,
  'Ground truth Z'
  groundZ                                 : ^float,
)

type image_trigger_control struct(
  '0 to disable, 1 to enable'
  enable                                  : uint8_t,
)

type image_available struct(
  'Camera id'
  camId                                   : uint64_t,
  'Camera # (starts with 0)'
  camNo                                   : uint8_t,
  'Timestamp'
  timestamp                               : uint64_t,
  'Until which timestamp this buffer will stay valid'
  validUntil                              : uint64_t,
  'The image sequence number'
  imgSeq                                  : uint32_t,
  'Position of the image in the buffer, starts with 0'
  imgBufIndex                             : uint32_t,
  'Image width'
  width                                   : uint16_t,
  'Image height'
  height                                  : uint16_t,
  'Image depth'
  depth                                   : uint16_t,
  'Image channels'
  channels                                : uint8_t,
  'Shared memory area key'
  key                                     : uint32_t,
  'Exposure time, in microseconds'
  exposure                                : uint32_t,
  'Camera gain'
  gain                                    : ^float,
  'Roll angle in rad'
  roll                                    : ^float,
  'Pitch angle in rad'
  pitch                                   : ^float,
  'Yaw angle in rad'
  yaw                                     : ^float,
  'Local frame Z coordinate (height over ground)'
  localZ                                  : ^float,
  'GPS X coordinate'
  lat                                     : ^float,
  'GPS Y coordinate'
  lon                                     : ^float,
  'Global frame altitude'
  alt                                     : ^float,
  'Ground truth X'
  groundX                                 : ^float,
  'Ground truth Y'
  groundY                                 : ^float,
  'Ground truth Z'
  groundZ                                 : ^float,
)

type set_position_control_offset struct(
  'System ID'
  targetSystem                            : uint8_t,
  'Component ID'
  targetComponent                         : uint8_t,
  'x position offset'
  x                                       : ^float,
  'y position offset'
  y                                       : ^float,
  'z position offset'
  z                                       : ^float,
  'yaw orientation offset in radians, 0 = NORTH'
  yaw                                     : ^float,
)

type position_control_setpoint struct(
  'ID of waypoint, 0 for plain position'
  ^id                                     : uint16_t,
  'x position'
  x                                       : ^float,
  'y position'
  y                                       : ^float,
  'z position'
  z                                       : ^float,
  'yaw orientation in radians, 0 = NORTH'
  yaw                                     : ^float,
)

type marker struct(
  'ID'
  ^id                                     : uint16_t,
  'x position'
  x                                       : ^float,
  'y position'
  y                                       : ^float,
  'z position'
  z                                       : ^float,
  'roll orientation'
  roll                                    : ^float,
  'pitch orientation'
  pitch                                   : ^float,
  'yaw orientation'
  yaw                                     : ^float,
)

type raw_aux struct(
  'ADC1 (J405 ADC3, LPC2148 AD0.6)'
  adc1                                    : uint16_t,
  'ADC2 (J405 ADC5, LPC2148 AD0.2)'
  adc2                                    : uint16_t,
  'ADC3 (J405 ADC6, LPC2148 AD0.1)'
  adc3                                    : uint16_t,
  'ADC4 (J405 ADC7, LPC2148 AD1.3)'
  adc4                                    : uint16_t,
  'Battery voltage'
  vbat                                    : uint16_t,
  'Barometric pressure (hecto Pascal)'
  baro                                    : int32_t,
  'Temperature (degrees celcius)'
  temp                                    : int16_t,
)

type watchdog_heartbeat struct(
  'Watchdog ID'
  watchdogId                              : uint16_t,
  'Number of processes'
  processCount                            : uint16_t,
)

type watchdog_process_info struct(
  'Watchdog ID'
  watchdogId                              : uint16_t,
  'Process ID'
  processId                               : uint16_t,
  'Process name'
  name                                    : [char, 100],
  'Process arguments'
  arguments                               : [char, 147],
  'Timeout (seconds)'
  timeout                                 : int32_t,
)

type watchdog_process_status struct(
  'Watchdog ID'
  watchdogId                              : uint16_t,
  'Process ID'
  processId                               : uint16_t,
  'Is running / finished / suspended / crashed'
  state                                   : uint8_t,
  'Is muted'
  muted                                   : uint8_t,
  'Number of crashes'
  crashes                                 : uint16_t,
  'PID'
  pid                                     : int32_t,
)

type watchdog_command struct(
  'Target system ID'
  targetSystemId                          : uint8_t,
  'Watchdog ID'
  watchdogId                              : uint16_t,
  'Process ID'
  processId                               : uint16_t,
  'Command ID'
  commandId                               : uint8_t,
)

type pattern_detected struct(
  '0: Pattern, 1: Letter'
  ^type                                   : uint8_t,
  'Confidence of detection'
  confidence                              : ^float,
  'Pattern file name'
  file                                    : [char, 100],
  'Accepted as true detection, 0 no, 1 yes'
  detected                                : uint8_t,
)

type point_of_interest struct(
  '0: Notice, 1: Warning, 2: Critical, 3: Emergency, 4: Debug'
  ^type                                   : uint8_t,
  '0: blue, 1: yellow, 2: red, 3: orange, 4: green, 5: magenta'
  color                                   : uint8_t,
  '0: global, 1:local'
  coordinateSystem                        : uint8_t,
  '0: no timeout, >1: timeout in seconds'
  timeout                                 : uint16_t,
  'X Position'
  x                                       : ^float,
  'Y Position'
  y                                       : ^float,
  'Z Position'
  z                                       : ^float,
  'POI name'
  name                                    : [char, 26],
)

type point_of_interest_connection struct(
  '0: Notice, 1: Warning, 2: Critical, 3: Emergency, 4: Debug'
  ^type                                   : uint8_t,
  '0: blue, 1: yellow, 2: red, 3: orange, 4: green, 5: magenta'
  color                                   : uint8_t,
  '0: global, 1:local'
  coordinateSystem                        : uint8_t,
  '0: no timeout, >1: timeout in seconds'
  timeout                                 : uint16_t,
  'X1 Position'
  xp1                                     : ^float,
  'Y1 Position'
  yp1                                     : ^float,
  'Z1 Position'
  zp1                                     : ^float,
  'X2 Position'
  xp2                                     : ^float,
  'Y2 Position'
  yp2                                     : ^float,
  'Z2 Position'
  zp2                                     : ^float,
  'POI connection name'
  name                                    : [char, 26],
)

type brief_feature struct(
  'x position in m'
  x                                       : ^float,
  'y position in m'
  y                                       : ^float,
  'z position in m'
  z                                       : ^float,
  'Orientation assignment 0: false, 1:true'
  orientationAssignment                   : uint8_t,
  'Size in pixels'
  size                                    : uint16_t,
  'Orientation'
  orientation                             : uint16_t,
  'Descriptor'
  descriptor                              : [uint8_t, 32],
  'Harris operator response at this location'
  response                                : ^float,
)

type attitude_control struct(
  'The system to be controlled'
  target                                  : uint8_t,
  'roll'
  roll                                    : ^float,
  'pitch'
  pitch                                   : ^float,
  'yaw'
  yaw                                     : ^float,
  'thrust'
  thrust                                  : ^float,
  'roll control enabled auto:0, manual:1'
  rollManual                              : uint8_t,
  'pitch auto:0, manual:1'
  pitchManual                             : uint8_t,
  'yaw auto:0, manual:1'
  yawManual                               : uint8_t,
  'thrust auto:0, manual:1'
  thrustManual                            : uint8_t,
)

type detection_stats struct(
  'Number of detections'
  detections                              : uint32_t,
  'Number of cluster iterations'
  clusterIters                            : uint32_t,
  'Best score'
  bestScore                               : ^float,
  'Best detection ID'
  bestDetectionId                         : uint32_t,
  'Best cluster ID'
  bestClusterId                           : uint32_t,
  'Best cluster ID'
  bestClusterIterId                       : uint32_t,
  'Number of images already processed'
  imagesDone                              : uint32_t,
  'Number of images still to process'
  imagesTodo                              : uint32_t,
  'Average images per seconds processed'
  fps                                     : ^float,
  'Latitude of the best detection * 1E7'
  bestLat                                 : int32_t,
  'Longitude of the best detection * 1E7'
  bestLon                                 : int32_t,
  'Altitude of the best detection * 1E3'
  bestAlt                                 : int32_t,
)

type onboard_health struct(
  'Uptime of system'
  uptime                                  : uint32_t,
  'CPU frequency'
  cpuFreq                                 : uint16_t,
  'CPU load in percent'
  cpuLoad                                 : uint8_t,
  'RAM usage in percent'
  ramUsage                                : uint8_t,
  'RAM size in GiB'
  ramTotal                                : ^float,
  'Swap usage in percent'
  swapUsage                               : uint8_t,
  'Swap size in GiB'
  swapTotal                               : ^float,
  'Disk health (-1: N/A, 0: ERR, 1: RO, 2: RW)'
  diskHealth                              : int8_t,
  'Disk usage in percent'
  diskUsage                               : uint8_t,
  'Disk total in GiB'
  diskTotal                               : ^float,
  'Temperature'
  temp                                    : ^float,
  'Supply voltage V'
  voltage                                 : ^float,
  'Network load inbound KiB/s'
  networkLoadIn                           : ^float,
  'Network load outbound in KiB/s '
  networkLoadOut                          : ^float,
)

type mav_cmd_uint16_t enum uint16_t (
	MAV_CMD_NAV_WAYPOINT = 16,
	MAV_CMD_NAV_LOITER_UNLIM = 17,
	MAV_CMD_NAV_LOITER_TURNS = 18,
	MAV_CMD_NAV_LOITER_TIME = 19,
	MAV_CMD_NAV_RETURN_TO_LAUNCH = 20,
	MAV_CMD_NAV_LAND = 21,
	MAV_CMD_NAV_TAKEOFF = 22,
	MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30,
	MAV_CMD_NAV_LOITER_TO_ALT = 31,
	MAV_CMD_NAV_ROI = 80,
	MAV_CMD_NAV_PATHPLANNING = 81,
	MAV_CMD_NAV_SPLINE_WAYPOINT = 82,
	MAV_CMD_NAV_GUIDED_ENABLE = 92,
	MAV_CMD_NAV_LAST = 95,
	MAV_CMD_CONDITION_DELAY = 112,
	MAV_CMD_CONDITION_CHANGE_ALT = 113,
	MAV_CMD_CONDITION_DISTANCE = 114,
	MAV_CMD_CONDITION_YAW = 115,
	MAV_CMD_CONDITION_LAST = 159,
	MAV_CMD_DO_SET_MODE = 176,
	MAV_CMD_DO_JUMP = 177,
	MAV_CMD_DO_CHANGE_SPEED = 178,
	MAV_CMD_DO_SET_HOME = 179,
	MAV_CMD_DO_SET_PARAMETER = 180,
	MAV_CMD_DO_SET_RELAY = 181,
	MAV_CMD_DO_REPEAT_RELAY = 182,
	MAV_CMD_DO_SET_SERVO = 183,
	MAV_CMD_DO_REPEAT_SERVO = 184,
	MAV_CMD_DO_FLIGHTTERMINATION = 185,
	MAV_CMD_DO_LAND_START = 189,
	MAV_CMD_DO_RALLY_LAND = 190,
	MAV_CMD_DO_GO_AROUND = 191,
	MAV_CMD_DO_CONTROL_VIDEO = 200,
	MAV_CMD_DO_SET_ROI = 201,
	MAV_CMD_DO_DIGICAM_CONFIGURE = 202,
	MAV_CMD_DO_DIGICAM_CONTROL = 203,
	MAV_CMD_DO_MOUNT_CONFIGURE = 204,
	MAV_CMD_DO_MOUNT_CONTROL = 205,
	MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206,
	MAV_CMD_DO_FENCE_ENABLE = 207,
	MAV_CMD_DO_PARACHUTE = 208,
	MAV_CMD_DO_INVERTED_FLIGHT = 210,
	MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220,
	MAV_CMD_DO_GUIDED_MASTER = 221,
	MAV_CMD_DO_GUIDED_LIMITS = 222,
	MAV_CMD_DO_LAST = 240,
	MAV_CMD_PREFLIGHT_CALIBRATION = 241,
	MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242,
	MAV_CMD_PREFLIGHT_STORAGE = 245,
	MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246,
	MAV_CMD_OVERRIDE_GOTO = 252,
	MAV_CMD_MISSION_START = 300,
	MAV_CMD_COMPONENT_ARM_DISARM = 400,
	MAV_CMD_START_RX_PAIR = 500,
	MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520,
	MAV_CMD_IMAGE_START_CAPTURE = 2000,
	MAV_CMD_IMAGE_STOP_CAPTURE = 2001,
	MAV_CMD_DO_TRIGGER_CONTROL = 2003,
	MAV_CMD_VIDEO_START_CAPTURE = 2500,
	MAV_CMD_VIDEO_STOP_CAPTURE = 2501,
	MAV_CMD_PANORAMA_CREATE = 2800,
	MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001,
	MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002,
	MAV_CMD_DO_START_SEARCH = 10001,
	MAV_CMD_DO_FINISH_SEARCH = 10002,
	MAV_CMD_NAV_SWEEP = 10003,
)

type mav_mission_result_uint8_t enum uint8_t (
	MAV_MISSION_ACCEPTED = 0,
	MAV_MISSION_ERROR = 1,
	MAV_MISSION_UNSUPPORTED_FRAME = 2,
	MAV_MISSION_UNSUPPORTED = 3,
	MAV_MISSION_NO_SPACE = 4,
	MAV_MISSION_INVALID = 5,
	MAV_MISSION_INVALID_PARAM1 = 6,
	MAV_MISSION_INVALID_PARAM2 = 7,
	MAV_MISSION_INVALID_PARAM3 = 8,
	MAV_MISSION_INVALID_PARAM4 = 9,
	MAV_MISSION_INVALID_PARAM5_X = 10,
	MAV_MISSION_INVALID_PARAM6_Y = 11,
	MAV_MISSION_INVALID_PARAM7 = 12,
	MAV_MISSION_INVALID_SEQUENCE = 13,
	MAV_MISSION_DENIED = 14,
)

type mav_battery_function_uint8_t enum uint8_t (
	MAV_BATTERY_FUNCTION_UNKNOWN = 0,
	MAV_BATTERY_FUNCTION_ALL = 1,
	MAV_BATTERY_FUNCTION_PROPULSION = 2,
	MAV_BATTERY_FUNCTION_AVIONICS = 3,
	MAV_BATTERY_TYPE_PAYLOAD = 4,
)

type mav_frame_uint8_t enum uint8_t (
	MAV_FRAME_GLOBAL = 0,
	MAV_FRAME_LOCAL_NED = 1,
	MAV_FRAME_MISSION = 2,
	MAV_FRAME_GLOBAL_RELATIVE_ALT = 3,
	MAV_FRAME_LOCAL_ENU = 4,
	MAV_FRAME_GLOBAL_INT = 5,
	MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,
	MAV_FRAME_LOCAL_OFFSET_NED = 7,
	MAV_FRAME_BODY_NED = 8,
	MAV_FRAME_BODY_OFFSET_NED = 9,
	MAV_FRAME_GLOBAL_TERRAIN_ALT = 10,
	MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11,
)

type mav_battery_type_uint8_t enum uint8_t (
	MAV_BATTERY_TYPE_UNKNOWN = 0,
	MAV_BATTERY_TYPE_LIPO = 1,
	MAV_BATTERY_TYPE_LIFE = 2,
	MAV_BATTERY_TYPE_LION = 3,
	MAV_BATTERY_TYPE_NIMH = 4,
)

type mav_estimator_type_uint8_t enum uint8_t (
	MAV_ESTIMATOR_TYPE_NAIVE = 1,
	MAV_ESTIMATOR_TYPE_VISION = 2,
	MAV_ESTIMATOR_TYPE_VIO = 3,
	MAV_ESTIMATOR_TYPE_GPS = 4,
	MAV_ESTIMATOR_TYPE_GPS_INS = 5,
)

type mav_severity_uint8_t enum uint8_t (
	MAV_SEVERITY_EMERGENCY = 0,
	MAV_SEVERITY_ALERT = 1,
	MAV_SEVERITY_CRITICAL = 2,
	MAV_SEVERITY_ERROR = 3,
	MAV_SEVERITY_WARNING = 4,
	MAV_SEVERITY_NOTICE = 5,
	MAV_SEVERITY_INFO = 6,
	MAV_SEVERITY_DEBUG = 7,
)

type mav_mode_uint8_t enum uint8_t (
	MAV_MODE_PREFLIGHT = 0,
	MAV_MODE_STABILIZE_DISARMED = 80,
	MAV_MODE_STABILIZE_ARMED = 208,
	MAV_MODE_MANUAL_DISARMED = 64,
	MAV_MODE_MANUAL_ARMED = 192,
	MAV_MODE_GUIDED_DISARMED = 88,
	MAV_MODE_GUIDED_ARMED = 216,
	MAV_MODE_AUTO_DISARMED = 92,
	MAV_MODE_AUTO_ARMED = 220,
	MAV_MODE_TEST_DISARMED = 66,
	MAV_MODE_TEST_ARMED = 194,
)

type mav_param_type_uint8_t enum uint8_t (
	MAV_PARAM_TYPE_UINT8 = 1,
	MAV_PARAM_TYPE_INT8 = 2,
	MAV_PARAM_TYPE_UINT16 = 3,
	MAV_PARAM_TYPE_INT16 = 4,
	MAV_PARAM_TYPE_UINT32 = 5,
	MAV_PARAM_TYPE_INT32 = 6,
	MAV_PARAM_TYPE_UINT64 = 7,
	MAV_PARAM_TYPE_INT64 = 8,
	MAV_PARAM_TYPE_REAL32 = 9,
	MAV_PARAM_TYPE_REAL64 = 10,
)

component Pixhawk {
	parameters (
		_0                                       : heartbeat,
		_1                                       : sys_status,
		_2                                       : system_time,
		_4                                       : ping,
		_5                                       : change_operator_control,
		_6                                       : change_operator_control_ack,
		_7                                       : auth_key,
		_11                                      : set_mode,
		_20                                      : param_request_read,
		_21                                      : param_request_list,
		_22                                      : param_value,
		_23                                      : param_set,
		_24                                      : gps_raw_int,
		_25                                      : gps_status,
		_26                                      : scaled_imu,
		_27                                      : raw_imu,
		_28                                      : raw_pressure,
		_29                                      : scaled_pressure,
		_30                                      : attitude,
		_31                                      : attitude_quaternion,
		_32                                      : local_position_ned,
		_33                                      : global_position_int,
		_34                                      : rc_channels_scaled,
		_35                                      : rc_channels_raw,
		_36                                      : servo_output_raw,
		_37                                      : mission_request_partial_list,
		_38                                      : mission_write_partial_list,
		_39                                      : mission_item,
		_40                                      : mission_request,
		_41                                      : mission_set_current,
		_42                                      : mission_current,
		_43                                      : mission_request_list,
		_44                                      : mission_count,
		_45                                      : mission_clear_all,
		_46                                      : mission_item_reached,
		_47                                      : mission_ack,
		_48                                      : set_gps_global_origin,
		_49                                      : gps_global_origin,
		_50                                      : param_map_rc,
		_54                                      : safety_set_allowed_area,
		_55                                      : safety_allowed_area,
		_61                                      : attitude_quaternion_cov,
		_62                                      : nav_controller_output,
		_63                                      : global_position_int_cov,
		_64                                      : local_position_ned_cov,
		_65                                      : rc_channels,
		_66                                      : request_data_stream,
		_67                                      : data_stream,
		_69                                      : manual_control,
		_70                                      : rc_channels_override,
		_73                                      : mission_item_int,
		_74                                      : vfr_hud,
		_75                                      : command_int,
		_76                                      : command_long,
		_77                                      : command_ack,
		_81                                      : manual_setpoint,
		_82                                      : set_attitude_target,
		_83                                      : attitude_target,
		_84                                      : set_position_target_local_ned,
		_85                                      : position_target_local_ned,
		_86                                      : set_position_target_global_int,
		_87                                      : position_target_global_int,
		_89                                      : local_position_ned_system_global_offset,
		_90                                      : hil_state,
		_91                                      : hil_controls,
		_92                                      : hil_rc_inputs_raw,
		_100                                     : optical_flow,
		_101                                     : global_vision_position_estimate,
		_102                                     : vision_position_estimate,
		_103                                     : vision_speed_estimate,
		_104                                     : vicon_position_estimate,
		_105                                     : highres_imu,
		_106                                     : optical_flow_rad,
		_107                                     : hil_sensor,
		_108                                     : sim_state,
		_109                                     : radio_status,
		_110                                     : file_transfer_protocol,
		_111                                     : timesync,
		_112                                     : camera_trigger,
		_113                                     : hil_gps,
		_114                                     : hil_optical_flow,
		_115                                     : hil_state_quaternion,
		_116                                     : scaled_imu2,
		_117                                     : log_request_list,
		_118                                     : log_entry,
		_119                                     : log_request_data,
		_120                                     : log_data,
		_121                                     : log_erase,
		_122                                     : log_request_end,
		_123                                     : gps_inject_data,
		_124                                     : gps2_raw,
		_125                                     : power_status,
		_126                                     : serial_control,
		_127                                     : gps_rtk,
		_128                                     : gps2_rtk,
		_129                                     : scaled_imu3,
		_130                                     : data_transmission_handshake,
		_131                                     : encapsulated_data,
		_132                                     : distance_sensor,
		_133                                     : terrain_request,
		_134                                     : terrain_data,
		_135                                     : terrain_check,
		_136                                     : terrain_report,
		_137                                     : scaled_pressure2,
		_138                                     : att_pos_mocap,
		_139                                     : set_actuator_control_target,
		_140                                     : actuator_control_target,
		_147                                     : battery_status,
		_148                                     : autopilot_version,
		_248                                     : v2_extension,
		_249                                     : memory_vect,
		_250                                     : debug_vect,
		_251                                     : named_value_float,
		_252                                     : named_value_int,
		_253                                     : statustext,
		_254                                     : debug,
		_151                                     : set_cam_shutter,
		_152                                     : image_triggered,
		_153                                     : image_trigger_control,
		_154                                     : image_available,
		_160                                     : set_position_control_offset,
		_170                                     : position_control_setpoint,
		_171                                     : marker,
		_172                                     : raw_aux,
		_180                                     : watchdog_heartbeat,
		_181                                     : watchdog_process_info,
		_182                                     : watchdog_process_status,
		_183                                     : watchdog_command,
		_190                                     : pattern_detected,
		_191                                     : point_of_interest,
		_192                                     : point_of_interest_connection,
		_195                                     : brief_feature,
		_200                                     : attitude_control,
		_205                                     : detection_stats,
		_206                                     : onboard_health,
	)

	command navWaypoint id = 16 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Hold time in decimal seconds. (ignored by fixed wing, time to stay at MISSION for rotary wing)'
		param1              : ^float,
		'Acceptance radius in meters (if the sphere with this radius is hit, the MISSION counts as reached)'
		param2              : ^float,
		'0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.'
		param3              : ^float,
		'Desired yaw angle at MISSION (rotary wing)'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navLoiterUnlim id = 17 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise'
		param3              : ^float,
		'Desired yaw angle.'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navLoiterTurns id = 18 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Turns'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise'
		param3              : ^float,
		'Desired yaw angle.'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navLoiterTime id = 19 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Seconds (decimal)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise'
		param3              : ^float,
		'Desired yaw angle.'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navReturnToLaunch id = 20 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command navLand id = 21 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Desired yaw angle.'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navTakeoff id = 22 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Minimum pitch (if airspeed sensor present), desired pitch without sensor'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Yaw angle (if magnetometer present), ignored without magnetometer'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navContinueAndChangeAlt id = 30 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Desired altitude in meters'
		param7              : ^float,
	)

	command navLoiterToAlt id = 31 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Heading Required (0 = False)'
		param1              : ^float,
		'Radius in meters. If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter.'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command navRoi id = 80 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Region of intereset mode. (see MAV_ROI enum)'
		param1              : ^float,
		'MISSION index/ target ID. (see MAV_ROI enum)'
		param2              : ^float,
		'ROI index (allows a vehicle to manage multiple ROI\'s)'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'x the location of the fixed ROI (see MAV_FRAME)'
		param5              : ^float,
		'y'
		param6              : ^float,
		'z'
		param7              : ^float,
	)

	command navPathplanning id = 81 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning'
		param1              : ^float,
		'0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Yaw angle at goal, in compass degrees, [0..360]'
		param4              : ^float,
		'Latitude/X of goal'
		param5              : ^float,
		'Longitude/Y of goal'
		param6              : ^float,
		'Altitude/Z of goal'
		param7              : ^float,
	)

	command navSplineWaypoint id = 82 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Hold time in decimal seconds. (ignored by fixed wing, time to stay at MISSION for rotary wing)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Latitude/X of goal'
		param5              : ^float,
		'Longitude/Y of goal'
		param6              : ^float,
		'Altitude/Z of goal'
		param7              : ^float,
	)

	command navGuidedEnable id = 92 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'On / Off (> 0.5f on)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command navLast id = 95 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command conditionDelay id = 112 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Delay in seconds (decimal)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command conditionChangeAlt id = 113 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Descent / Ascend rate (m/s)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Finish Altitude'
		param7              : ^float,
	)

	command conditionDistance id = 114 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Distance (meters)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command conditionYaw id = 115 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'target angle: [0-360], 0 is north'
		param1              : ^float,
		'speed during yaw change:[deg per second]'
		param2              : ^float,
		'direction: negative: counter clockwise, positive: clockwise [-1,1]'
		param3              : ^float,
		'relative offset or absolute angle: [ 1,0]'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command conditionLast id = 159 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doSetMode id = 176 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Mode, as defined by ENUM MAV_MODE'
		param1              : ^float,
		'Custom mode - this is system specific, please refer to the individual autopilot specifications for details.'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doJump id = 177 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Sequence number'
		param1              : ^float,
		'Repeat count'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doChangeSpeed id = 178 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Speed type (0=Airspeed, 1=Ground Speed)'
		param1              : ^float,
		'Speed  (m/s, -1 indicates no change)'
		param2              : ^float,
		'Throttle  ( Percent, -1 indicates no change)'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doSetHome id = 179 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Use current (1=use current location, 0=use specified location)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Altitude'
		param7              : ^float,
	)

	command doSetParameter id = 180 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Parameter number'
		param1              : ^float,
		'Parameter value'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doSetRelay id = 181 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Relay number'
		param1              : ^float,
		'Setting (1=on, 0=off, others possible depending on system hardware)'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doRepeatRelay id = 182 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Relay number'
		param1              : ^float,
		'Cycle count'
		param2              : ^float,
		'Cycle time (seconds, decimal)'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doSetServo id = 183 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Servo number'
		param1              : ^float,
		'PWM (microseconds, 1000 to 2000 typical)'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doRepeatServo id = 184 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Servo number'
		param1              : ^float,
		'PWM (microseconds, 1000 to 2000 typical)'
		param2              : ^float,
		'Cycle count'
		param3              : ^float,
		'Cycle time (seconds)'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doFlighttermination id = 185 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Flight termination activated if > 0.5'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doLandStart id = 189 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Latitude'
		param5              : ^float,
		'Longitude'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doRallyLand id = 190 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Break altitude (meters)'
		param1              : ^float,
		'Landing speed (m/s)'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doGoAround id = 191 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Altitude (meters)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doControlVideo id = 200 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Camera ID (-1 for all)'
		param1              : ^float,
		'Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw'
		param2              : ^float,
		'Transmission mode: 0: video stream, >0: single images every n seconds (decimal)'
		param3              : ^float,
		'Recording: 0: disabled, 1: enabled compressed, 2: enabled raw'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doSetRoi id = 201 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Region of intereset mode. (see MAV_ROI enum)'
		param1              : ^float,
		'MISSION index/ target ID. (see MAV_ROI enum)'
		param2              : ^float,
		'ROI index (allows a vehicle to manage multiple ROI\'s)'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'x the location of the fixed ROI (see MAV_FRAME)'
		param5              : ^float,
		'y'
		param6              : ^float,
		'z'
		param7              : ^float,
	)

	command doDigicamConfigure id = 202 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Modes: P, TV, AV, M, Etc'
		param1              : ^float,
		'Shutter speed: Divisor number for one second'
		param2              : ^float,
		'Aperture: F stop number'
		param3              : ^float,
		'ISO number e.g. 80, 100, 200, Etc'
		param4              : ^float,
		'Exposure type enumerator'
		param5              : ^float,
		'Command Identity'
		param6              : ^float,
		'Main engine cut-off time before camera trigger in seconds/10 (0 means no cut-off)'
		param7              : ^float,
	)

	command doDigicamControl id = 203 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Session control e.g. show/hide lens'
		param1              : ^float,
		'Zoom\'s absolute position'
		param2              : ^float,
		'Zooming step value to offset zoom from the current position'
		param3              : ^float,
		'Focus Locking, Unlocking or Re-locking'
		param4              : ^float,
		'Shooting Command'
		param5              : ^float,
		'Command Identity'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doMountConfigure id = 204 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Mount operation mode (see MAV_MOUNT_MODE enum)'
		param1              : ^float,
		'stabilize roll? (1 = yes, 0 = no)'
		param2              : ^float,
		'stabilize pitch? (1 = yes, 0 = no)'
		param3              : ^float,
		'stabilize yaw? (1 = yes, 0 = no)'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doMountControl id = 205 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'pitch or lat in degrees, depending on mount mode.'
		param1              : ^float,
		'roll or lon in degrees depending on mount mode'
		param2              : ^float,
		'yaw or alt (in meters) depending on mount mode'
		param3              : ^float,
		'reserved'
		param4              : ^float,
		'reserved'
		param5              : ^float,
		'reserved'
		param6              : ^float,
		'MAV_MOUNT_MODE enum value'
		param7              : ^float,
	)

	command doSetCamTriggDist id = 206 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Camera trigger distance (meters)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doFenceEnable id = 207 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'enable? (0=disable, 1=enable)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doParachute id = 208 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'action (0=disable, 1=enable, 2=release, for some systems see PARACHUTE_ACTION enum, not in general message set.)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doInvertedFlight id = 210 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'inverted (0=normal, 1=inverted)'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doMountControlQuat id = 220 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'q1 - quaternion param #1, w (1 in null-rotation)'
		param1              : ^float,
		'q2 - quaternion param #2, x (0 in null-rotation)'
		param2              : ^float,
		'q3 - quaternion param #3, y (0 in null-rotation)'
		param3              : ^float,
		'q4 - quaternion param #4, z (0 in null-rotation)'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doGuidedMaster id = 221 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'System ID'
		param1              : ^float,
		'Component ID'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doGuidedLimits id = 222 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'timeout - maximum time (in seconds) that external controller will be allowed to control vehicle. 0 means no timeout'
		param1              : ^float,
		'absolute altitude min (in meters, AMSL) - if vehicle moves below this alt, the command will be aborted and the mission will continue.  0 means no lower altitude limit'
		param2              : ^float,
		'absolute altitude max (in meters)- if vehicle moves above this alt, the command will be aborted and the mission will continue.  0 means no upper altitude limit'
		param3              : ^float,
		'horizontal move limit (in meters, AMSL) - if vehicle moves more than this distance from it\'s location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal altitude limit'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command doLast id = 240 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Empty'
		param1              : ^float,
		'Empty'
		param2              : ^float,
		'Empty'
		param3              : ^float,
		'Empty'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command preflightCalibration id = 241 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Gyro calibration: 0: no, 1: yes'
		param1              : ^float,
		'Magnetometer calibration: 0: no, 1: yes'
		param2              : ^float,
		'Ground pressure: 0: no, 1: yes'
		param3              : ^float,
		'Radio calibration: 0: no, 1: yes'
		param4              : ^float,
		'Accelerometer calibration: 0: no, 1: yes'
		param5              : ^float,
		'Compass/Motor interference calibration: 0: no, 1: yes'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command preflightSetSensorOffsets id = 242 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer'
		param1              : ^float,
		'X axis offset (or generic dimension 1), in the sensor\'s raw units'
		param2              : ^float,
		'Y axis offset (or generic dimension 2), in the sensor\'s raw units'
		param3              : ^float,
		'Z axis offset (or generic dimension 3), in the sensor\'s raw units'
		param4              : ^float,
		'Generic dimension 4, in the sensor\'s raw units'
		param5              : ^float,
		'Generic dimension 5, in the sensor\'s raw units'
		param6              : ^float,
		'Generic dimension 6, in the sensor\'s raw units'
		param7              : ^float,
	)

	command preflightStorage id = 245 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM'
		param1              : ^float,
		'Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM'
		param2              : ^float,
		'Reserved'
		param3              : ^float,
		'Reserved'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command preflightRebootShutdown id = 246 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot.'
		param1              : ^float,
		'0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer.'
		param2              : ^float,
		'Reserved'
		param3              : ^float,
		'Reserved'
		param4              : ^float,
		'Empty'
		param5              : ^float,
		'Empty'
		param6              : ^float,
		'Empty'
		param7              : ^float,
	)

	command overrideGoto id = 252 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'MAV_GOTO_DO_HOLD: hold MAV_GOTO_DO_CONTINUE: continue with next item in mission plan'
		param1              : ^float,
		'MAV_GOTO_HOLD_AT_CURRENT_POSITION: Hold at current position MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position'
		param2              : ^float,
		'MAV_FRAME coordinate frame of hold point'
		param3              : ^float,
		'Desired yaw angle in degrees'
		param4              : ^float,
		'Latitude / X position'
		param5              : ^float,
		'Longitude / Y position'
		param6              : ^float,
		'Altitude / Z position'
		param7              : ^float,
	)

	command missionStart id = 300 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'first_item: the first mission item to run'
		param1              : ^float,
		'last_item:  the last mission item to run (after this item is run, the mission ends)'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command componentArmDisarm id = 400 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'1 to arm, 0 to disarm'
		param1              : ^float,
		'Parameter 2, as defined by MAV_CMD enum.'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command startRxPair id = 500 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'0:Spektrum'
		param1              : ^float,
		'0:Spektrum DSM2, 1:Spektrum DSMX'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command requestAutopilotCapabilities id = 520 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'1: Request autopilot version'
		param1              : ^float,
		'Reserved (all remaining params)'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command imageStartCapture id = 2000 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Duration between two consecutive pictures (in seconds)'
		param1              : ^float,
		'Number of images to capture total - 0 for unlimited capture'
		param2              : ^float,
		'Resolution in megapixels (0.3 for 640x480, 1.3 for 1280x720, etc)'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command imageStopCapture id = 2001 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Reserved'
		param1              : ^float,
		'Reserved'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command doTriggerControl id = 2003 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Trigger enable/disable (0 for disable, 1 for start)'
		param1              : ^float,
		'Shutter integration time (in ms)'
		param2              : ^float,
		'Reserved'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command videoStartCapture id = 2500 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Camera ID (0 for all cameras), 1 for first, 2 for second, etc.'
		param1              : ^float,
		'Frames per second'
		param2              : ^float,
		'Resolution in megapixels (0.3 for 640x480, 1.3 for 1280x720, etc)'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command videoStopCapture id = 2501 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Reserved'
		param1              : ^float,
		'Reserved'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command panoramaCreate id = 2800 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Viewing angle horizontal of the panorama (in degrees, +- 0.5 the total angle)'
		param1              : ^float,
		'Viewing angle vertical of panorama (in degrees)'
		param2              : ^float,
		'Speed of the horizontal rotation (in degrees per second)'
		param3              : ^float,
		'Speed of the vertical rotation (in degrees per second)'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command payloadPrepareDeploy id = 30001 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list.'
		param1              : ^float,
		'Desired approach vector in degrees compass heading (0..360). A negative value indicates the system can define the approach vector at will.'
		param2              : ^float,
		'Desired ground speed at release time. This can be overriden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will.'
		param3              : ^float,
		'Minimum altitude clearance to the release position in meters. A negative value indicates the system can define the clearance at will.'
		param4              : ^float,
		'Latitude unscaled for MISSION_ITEM or in 1e7 degrees for MISSION_ITEM_INT'
		param5              : ^float,
		'Longitude unscaled for MISSION_ITEM or in 1e7 degrees for MISSION_ITEM_INT'
		param6              : ^float,
		'Altitude, in meters AMSL'
		param7              : ^float,
	)

	command payloadControlDeploy id = 30002 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deploment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests.'
		param1              : ^float,
		'Reserved'
		param2              : ^float,
		'Reserved'
		param3              : ^float,
		'Reserved'
		param4              : ^float,
		'Reserved'
		param5              : ^float,
		'Reserved'
		param6              : ^float,
		'Reserved'
		param7              : ^float,
	)

	command doStartSearch id = 10001 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'1 to arm, 0 to disarm'
		param1              : ^float,
		'Parameter 2, as defined by MAV_CMD enum.'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command doFinishSearch id = 10002 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'1 to arm, 0 to disarm'
		param1              : ^float,
		'Parameter 2, as defined by MAV_CMD enum.'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	command navSweep id = 10003 (
		targetSystem        : uint8_t,
		targetComponent     : uint8_t,
		^command            : mav_cmd_uint16_t,
		confirmation        : uint8_t,
		'1 to arm, 0 to disarm'
		param1              : ^float,
		'Parameter 2, as defined by MAV_CMD enum.'
		param2              : ^float,
		'Parameter 3, as defined by MAV_CMD enum.'
		param3              : ^float,
		'Parameter 4, as defined by MAV_CMD enum.'
		param4              : ^float,
		'Parameter 5, as defined by MAV_CMD enum.'
		param5              : ^float,
		'Parameter 6, as defined by MAV_CMD enum.'
		param6              : ^float,
		'Parameter 7, as defined by MAV_CMD enum.'
		param7              : ^float,
	)

	status heartbeat                                id = 0 (_0)
	status sysStatus                                id = 1 (_1)
	status systemTime                               id = 2 (_2)
	status ping                                     id = 4 (_4)
	status changeOperatorControl                    id = 5 (_5)
	status changeOperatorControlAck                 id = 6 (_6)
	status authKey                                  id = 7 (_7)
	status setMode                                  id = 11 (_11)
	status paramRequestRead                         id = 20 (_20)
	status paramRequestList                         id = 21 (_21)
	status paramValue                               id = 22 (_22)
	status paramSet                                 id = 23 (_23)
	status gpsRawInt                                id = 24 (_24)
	status gpsStatus                                id = 25 (_25)
	status scaledImu                                id = 26 (_26)
	status rawImu                                   id = 27 (_27)
	status rawPressure                              id = 28 (_28)
	status scaledPressure                           id = 29 (_29)
	status attitude                                 id = 30 (_30)
	status attitudeQuaternion                       id = 31 (_31)
	status localPositionNed                         id = 32 (_32)
	status globalPositionInt                        id = 33 (_33)
	status rcChannelsScaled                         id = 34 (_34)
	status rcChannelsRaw                            id = 35 (_35)
	status servoOutputRaw                           id = 36 (_36)
	status missionRequestPartialList                id = 37 (_37)
	status missionWritePartialList                  id = 38 (_38)
	status missionItem                              id = 39 (_39)
	status missionRequest                           id = 40 (_40)
	status missionSetCurrent                        id = 41 (_41)
	status missionCurrent                           id = 42 (_42)
	status missionRequestList                       id = 43 (_43)
	status missionCount                             id = 44 (_44)
	status missionClearAll                          id = 45 (_45)
	status missionItemReached                       id = 46 (_46)
	status missionAck                               id = 47 (_47)
	status setGpsGlobalOrigin                       id = 48 (_48)
	status gpsGlobalOrigin                          id = 49 (_49)
	status paramMapRc                               id = 50 (_50)
	status safetySetAllowedArea                     id = 54 (_54)
	status safetyAllowedArea                        id = 55 (_55)
	status attitudeQuaternionCov                    id = 61 (_61)
	status navControllerOutput                      id = 62 (_62)
	status globalPositionIntCov                     id = 63 (_63)
	status localPositionNedCov                      id = 64 (_64)
	status rcChannels                               id = 65 (_65)
	status requestDataStream                        id = 66 (_66)
	status dataStream                               id = 67 (_67)
	status manualControl                            id = 69 (_69)
	status rcChannelsOverride                       id = 70 (_70)
	status missionItemInt                           id = 73 (_73)
	status vfrHud                                   id = 74 (_74)
	status commandInt                               id = 75 (_75)
	status commandAck                               id = 77 (_77)
	status manualSetpoint                           id = 81 (_81)
	status setAttitudeTarget                        id = 82 (_82)
	status attitudeTarget                           id = 83 (_83)
	status setPositionTargetLocalNed                id = 84 (_84)
	status positionTargetLocalNed                   id = 85 (_85)
	status setPositionTargetGlobalInt               id = 86 (_86)
	status positionTargetGlobalInt                  id = 87 (_87)
	status localPositionNedSystemGlobalOffset       id = 89 (_89)
	status hilState                                 id = 90 (_90)
	status hilControls                              id = 91 (_91)
	status hilRcInputsRaw                           id = 92 (_92)
	status opticalFlow                              id = 100 (_100)
	status globalVisionPositionEstimate             id = 101 (_101)
	status visionPositionEstimate                   id = 102 (_102)
	status visionSpeedEstimate                      id = 103 (_103)
	status viconPositionEstimate                    id = 104 (_104)
	status highresImu                               id = 105 (_105)
	status opticalFlowRad                           id = 106 (_106)
	status hilSensor                                id = 107 (_107)
	status simState                                 id = 108 (_108)
	status radioStatus                              id = 109 (_109)
	status fileTransferProtocol                     id = 110 (_110)
	status timesync                                 id = 111 (_111)
	status cameraTrigger                            id = 112 (_112)
	status hilGps                                   id = 113 (_113)
	status hilOpticalFlow                           id = 114 (_114)
	status hilStateQuaternion                       id = 115 (_115)
	status scaledImu2                               id = 116 (_116)
	status logRequestList                           id = 117 (_117)
	status logEntry                                 id = 118 (_118)
	status logRequestData                           id = 119 (_119)
	status logData                                  id = 120 (_120)
	status logErase                                 id = 121 (_121)
	status logRequestEnd                            id = 122 (_122)
	status gpsInjectData                            id = 123 (_123)
	status gps2Raw                                  id = 124 (_124)
	status powerStatus                              id = 125 (_125)
	status serialControl                            id = 126 (_126)
	status gpsRtk                                   id = 127 (_127)
	status gps2Rtk                                  id = 128 (_128)
	status scaledImu3                               id = 129 (_129)
	status dataTransmissionHandshake                id = 130 (_130)
	status encapsulatedData                         id = 131 (_131)
	status distanceSensor                           id = 132 (_132)
	status terrainRequest                           id = 133 (_133)
	status terrainData                              id = 134 (_134)
	status terrainCheck                             id = 135 (_135)
	status terrainReport                            id = 136 (_136)
	status scaledPressure2                          id = 137 (_137)
	status attPosMocap                              id = 138 (_138)
	status setActuatorControlTarget                 id = 139 (_139)
	status actuatorControlTarget                    id = 140 (_140)
	status batteryStatus                            id = 147 (_147)
	status autopilotVersion                         id = 148 (_148)
	status v2Extension                              id = 248 (_248)
	status memoryVect                               id = 249 (_249)
	status debugVect                                id = 250 (_250)
	status namedValueFloat                          id = 251 (_251)
	status namedValueInt                            id = 252 (_252)
	status statustext                               id = 253 (_253)
	status debug                                    id = 254 (_254)
	status setCamShutter                            id = 151 (_151)
	status imageTriggered                           id = 152 (_152)
	status imageTriggerControl                      id = 153 (_153)
	status imageAvailable                           id = 154 (_154)
	status setPositionControlOffset                 id = 160 (_160)
	status positionControlSetpoint                  id = 170 (_170)
	status marker                                   id = 171 (_171)
	status rawAux                                   id = 172 (_172)
	status watchdogHeartbeat                        id = 180 (_180)
	status watchdogProcessInfo                      id = 181 (_181)
	status watchdogProcessStatus                    id = 182 (_182)
	status watchdogCommand                          id = 183 (_183)
	status patternDetected                          id = 190 (_190)
	status pointOfInterest                          id = 191 (_191)
	status pointOfInterestConnection                id = 192 (_192)
	status briefFeature                             id = 195 (_195)
	status attitudeControl                          id = 200 (_200)
	status detectionStats                           id = 205 (_205)
	status onboardHealth                            id = 206 (_206)
}
