ru"Модуль доступа к бортовой файловой системе"
namespace mcc.fs

import decode.(array, varuint, or, u8, bool)

import mcc.foundation.string
import mcc.foundation.error_code

language ru

'Информация о файле'
struct file_info
(
  'Путь до файла'
  path: string,
  'Длина данных в байтах'
  byteSize: varuint,
  'Аттрибуты файла'
  attrs: varuint
)

struct node_info
(
  'Имя узла в пределах каталога'
  name: string,
  'Флаг каталога'
  isDir: bool,
  'Аттрибуты узла'
  attrs: varuint,
)

enum file_upload_error extends error_code (ALREADY_EXISTS = 1, CANT_WRITE = 2, MODE_ERROR = 3, TOO_BIG = 4)
enum file_delete_error extends error_code (NOT_FOUND = 1, CANT_DELETE = 2)
enum file_download_error extends error_code (NOT_FOUND = 1, CANT_READ = 2, NOT_FILE = 3, EOF = 4)
enum file_list_error extends error_code (NOT_FOUND = 1, CANT_READ = 2, NOT_DIR = 3)
enum file_create_dir_error extends error_code (NOT_FOUND = 1, CANT_WRITE = 2)
enum files_mode  varuint (BASE = 0, UPLOADING_FILE = 1, DOWNLOADING_FILE = 2, DOWNLOADING_FILE_LIST = 3)

enum files_event  varuint (MODE_CHANGED = 1)

'Компонент поддерживающий управление файловой системой'
component Files
{
  parameters
  (
    'Текущий активный режим'
    activeMode: files_mode
  )

  'Начать загрузку файла'
  command startFileUpload('Информация о загружаемом файле' fileInfo: file_info): file_upload_error

  'Загрузить файл'
  command uploadFilePart('Часть данных файла' fileContentsPart: array[u8]): file_upload_error

  'Закончить загрузку файла'
  command stopFileUpload(): file_upload_error

  'Начать скачивание файла'
  command startFileDownload('Путь до файла' path: string): or[file_info, file_download_error]

  'Запросить следующую часть данных файла'
  command downloadFilePart('Максимальный размер части данных файла' byteSize: varuint): or[array[u8], file_download_error]

  'Закончить скачивание файла'
  command stopFileDownload(): file_download_error

  'Начать скачивание списка узлов каталога'
  command startRequestFileList(): or[varuint, file_list_error]

  'Запросить следующую часть списка узлов каталога'
  command requestFileListPart('Максимальное количество узлов в ответе' nodeSize: varuint): or[array[node_info], file_list_error]

  'Закончить скачивание списка узлов каталога'
  command stopRequestFileList(): file_list_error

  'Удалить файл или каталог'
  command deleteNode('Путь до узла' path: string): file_delete_error

  'Запросить создание каталога'
  command createDir('Путь к каталогу' path: string): file_create_dir_error

  status activeMode(activeMode)

  event modeChanged files_event
  (
    'Старый режим' var oldMode: files_mode,
    'Новый режим' activeMode,
  )
}