DROP TABLE IF EXISTS message_parameter;
DROP TABLE IF EXISTS event_message;
DROP TABLE IF EXISTS status_message;
DROP TABLE IF EXISTS dynamic_status_message;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS command_argument;
DROP TABLE IF EXISTS command;
DROP TABLE IF EXISTS enum_type_constant;
DROP TABLE IF EXISTS enum_type;
DROP TABLE IF EXISTS array_type;
DROP TABLE IF EXISTS sub_type;
DROP TABLE IF EXISTS struct_type_field;
DROP TABLE IF EXISTS struct_type;
DROP TABLE IF EXISTS primitive_type;
DROP TABLE IF EXISTS native_type;
DROP TABLE IF EXISTS sub_component;
DROP TABLE IF EXISTS component;
DROP TABLE IF EXISTS alias_type;
DROP TABLE IF EXISTS type;
DROP TABLE IF EXISTS unit;
DROP TABLE IF EXISTS sub_namespace;
DROP TABLE IF EXISTS namespace;

CREATE TABLE namespace (id INTEGER NOT NULL PRIMARY KEY, name TEXT NOT NULL);

CREATE TABLE sub_namespace (
    namespace_id INTEGER NOT NULL REFERENCES namespace(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    sub_namespace_id INTEGER NOT NULL REFERENCES namespace(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    UNIQUE(namespace_id, sub_namespace_id)
);

CREATE TABLE unit (
    id INTEGER NOT NULL PRIMARY KEY,
    namespace_id INTEGER NOT NULL REFERENCES namespace(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NOT NULL,
    display TEXT NULL,
    info TEXT NULL,
    UNIQUE(namespace_id, name)
);

CREATE TABLE type (
    id INTEGER NOT NULL PRIMARY KEY,
    namespace_id INTEGER NOT NULL REFERENCES namespace(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NULL,
    info TEXT NULL,
    UNIQUE(namespace_id, name)
);

CREATE TABLE alias_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    base_type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    UNIQUE(type_id, base_type_id)
);

CREATE TABLE native_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE primitive_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    kind TEXT NOT NULL,
    bit_length INTEGER NOT NULL
);

CREATE TABLE sub_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    base_type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE array_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    base_type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    min_length INTEGER NOT NULL,
    max_length INTEGER NOT NULL
);

CREATE TABLE enum_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    base_type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE enum_type_constant (
    id INTEGER NOT NULL PRIMARY KEY,
    enum_type_id INTEGER NOT NULL REFERENCES enum_type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NOT NULL,
    info TEXT NULL,
    value TEXT NOT NULL,
    UNIQUE(enum_type_id, name)
);

CREATE TABLE struct_type (
    id INTEGER NOT NULL PRIMARY KEY,
    type_id INTEGER NOT NULL UNIQUE REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE struct_type_field (
    id INTEGER NOT NULL PRIMARY KEY,
    struct_type_id INTEGER NOT NULL REFERENCES struct_type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    field_index INTEGER NOT NULL,
    name TEXT NOT NULL,
    type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    unit_id INTEGER NULL REFERENCES unit(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    info TEXT NULL,
    UNIQUE(struct_type_id, name),
    UNIQUE(struct_type_id, field_index)
);

CREATE TABLE component (
    id INTEGER NOT NULL PRIMARY KEY,
    namespace_id INTEGER NOT NULL REFERENCES namespace(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NOT NULL,
    info TEXT NULL,
    base_type_id INTEGER NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    UNIQUE(namespace_id, name)
);

CREATE TABLE sub_component (
    component_id INTEGER NOT NULL REFERENCES component(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    sub_component_id INTEGER NOT NULL REFERENCES component(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    UNIQUE(component_id, sub_component_id)
);

CREATE TABLE command (
    id INTEGER NOT NULL PRIMARY KEY,
    component_id INTEGER NOT NULL REFERENCES component(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NOT NULL,
    command_id INTEGER NOT NULL,
    info TEXT NULL,
    UNIQUE(component_id, name),
    UNIQUE(component_id, command_id)
);

CREATE TABLE command_argument (
    id INTEGER NOT NULL PRIMARY KEY,
    command_id INTEGER NOT NULL REFERENCES command(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    argument_index INTEGER NOT NULL,
    name TEXT NOT NULL,
    type_id INTEGER NOT NULL REFERENCES type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    unit_id INTEGER NULL REFERENCES unit(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    info TEXT NULL,
    UNIQUE(command_id, argument_index),
    UNIQUE(command_id, name)
);

CREATE TABLE message (
    id INTEGER NOT NULL PRIMARY KEY,
    component_id INTEGER NOT NULL REFERENCES component(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    name TEXT NOT NULL,
    message_id INTEGER NOT NULL,
    info TEXT NULL,
    UNIQUE(component_id, name),
    UNIQUE(component_id, message_id)
);

CREATE TABLE status_message (
    id INTEGER NOT NULL PRIMARY KEY,
    message_id INTEGER NOT NULL UNIQUE REFERENCES message(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE event_message (
    id INTEGER NOT NULL PRIMARY KEY,
    message_id INTEGER NOT NULL UNIQUE REFERENCES message(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE dynamic_status_message (
    id INTEGER NOT NULL PRIMARY KEY,
    message_id INTEGER NOT NULL UNIQUE REFERENCES message(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE message_parameter (
    id INTEGER NOT NULL PRIMARY KEY,
    message_id INTEGER NOT NULL REFERENCES message(id) ON DELETE RESTRICT ON UPDATE CASCADE,
    parameter_index INTEGER NOT NULL,
    name TEXT NOT NULL,
    UNIQUE(message_id, parameter_index),
    UNIQUE(message_id, name)
);